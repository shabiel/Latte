KIDS Distribution saved on Aug 09, 2013@16:14:07
Latte 1.0 T3
**KIDS**:KBAN LATTE 1.0^

**INSTALL NAME**
KBAN LATTE 1.0
"BLD",9267,0)
KBAN LATTE 1.0^^0^3130809^n
"BLD",9267,1,0)
^^12^12^3130809^^
"BLD",9267,1,1,0)
Created by Sam Habiel, VISTA Expertise Network.
"BLD",9267,1,2,0)
(C) Sam Habiel 2013. All rights reserved.
"BLD",9267,1,3,0)
 
"BLD",9267,1,4,0)
These modifications intercept MOCHA messages and pass them back to VISTA 
"BLD",9267,1,5,0)
where the drug checks are performed as follows:
"BLD",9267,1,6,0)
 
"BLD",9267,1,7,0)
- Drug interactions are checked against the DRUG INTERACTION file.
"BLD",9267,1,8,0)
- Duplicate therapy checks are performed against the VA DRUG CLASS file 
"BLD",9267,1,9,0)
using the VA drug classes of the drugs.
"BLD",9267,1,10,0)
- Dosage checking is not performed. An empty stub is sent back to signify 
"BLD",9267,1,11,0)
that it happened successfully but no data is returned; this is done so 
"BLD",9267,1,12,0)
that the MOCHA-related Mumps code won't invoke the error handling.
"BLD",9267,4,0)
^9.64PA^^
"BLD",9267,6.3)
3
"BLD",9267,"KRN",0)
^9.67PA^779.2^20
"BLD",9267,"KRN",.4,0)
.4
"BLD",9267,"KRN",.401,0)
.401
"BLD",9267,"KRN",.402,0)
.402
"BLD",9267,"KRN",.403,0)
.403
"BLD",9267,"KRN",.5,0)
.5
"BLD",9267,"KRN",.84,0)
.84
"BLD",9267,"KRN",3.6,0)
3.6
"BLD",9267,"KRN",3.8,0)
3.8
"BLD",9267,"KRN",9.2,0)
9.2
"BLD",9267,"KRN",9.8,0)
9.8
"BLD",9267,"KRN",9.8,"NM",0)
^9.68A^6^6
"BLD",9267,"KRN",9.8,"NM",1,0)
KBANLATT^^0^B80233460
"BLD",9267,"KRN",9.8,"NM",2,0)
KBANLWRT^^0^B114360032
"BLD",9267,"KRN",9.8,"NM",3,0)
PSSHTTP^^0^B14560152
"BLD",9267,"KRN",9.8,"NM",4,0)
PSODDPRE^^0^B135966725
"BLD",9267,"KRN",9.8,"NM",5,0)
PSSHRVAL^^0^B153337864
"BLD",9267,"KRN",9.8,"NM",6,0)
PSSHRIT^^0^B214661545
"BLD",9267,"KRN",9.8,"NM","B","KBANLATT",1)

"BLD",9267,"KRN",9.8,"NM","B","KBANLWRT",2)

"BLD",9267,"KRN",9.8,"NM","B","PSODDPRE",4)

"BLD",9267,"KRN",9.8,"NM","B","PSSHRIT",6)

"BLD",9267,"KRN",9.8,"NM","B","PSSHRVAL",5)

"BLD",9267,"KRN",9.8,"NM","B","PSSHTTP",3)

"BLD",9267,"KRN",19,0)
19
"BLD",9267,"KRN",19.1,0)
19.1
"BLD",9267,"KRN",101,0)
101
"BLD",9267,"KRN",409.61,0)
409.61
"BLD",9267,"KRN",771,0)
771
"BLD",9267,"KRN",779.2,0)
779.2
"BLD",9267,"KRN",870,0)
870
"BLD",9267,"KRN",8989.51,0)
8989.51
"BLD",9267,"KRN",8989.52,0)
8989.52
"BLD",9267,"KRN",8994,0)
8994
"BLD",9267,"KRN","B",.4,.4)

"BLD",9267,"KRN","B",.401,.401)

"BLD",9267,"KRN","B",.402,.402)

"BLD",9267,"KRN","B",.403,.403)

"BLD",9267,"KRN","B",.5,.5)

"BLD",9267,"KRN","B",.84,.84)

"BLD",9267,"KRN","B",3.6,3.6)

"BLD",9267,"KRN","B",3.8,3.8)

"BLD",9267,"KRN","B",9.2,9.2)

"BLD",9267,"KRN","B",9.8,9.8)

"BLD",9267,"KRN","B",19,19)

"BLD",9267,"KRN","B",19.1,19.1)

"BLD",9267,"KRN","B",101,101)

"BLD",9267,"KRN","B",409.61,409.61)

"BLD",9267,"KRN","B",771,771)

"BLD",9267,"KRN","B",779.2,779.2)

"BLD",9267,"KRN","B",870,870)

"BLD",9267,"KRN","B",8989.51,8989.51)

"BLD",9267,"KRN","B",8989.52,8989.52)

"BLD",9267,"KRN","B",8994,8994)

"BLD",9267,"QUES",0)
^9.62^^
"BLD",9267,"REQB",0)
^9.611^2^2
"BLD",9267,"REQB",1,0)
XML PROCESSING UTILITIES 2.0T2^1
"BLD",9267,"REQB",2,0)
PSS*1.0*117^1
"BLD",9267,"REQB","B","PSS*1.0*117",2)

"BLD",9267,"REQB","B","XML PROCESSING UTILITIES 2.0T2",1)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
6
"RTN","KBANLATT")
0^1^B80233460
"RTN","KBANLATT",1,0)
KBANLATT ; VEN/SMH - Imitate MOCHA Latte Sytle ;2013-08-06  11:19 AM
"RTN","KBANLATT",2,0)
 ;;0.4;SAM'S INDUSTRIAL CONGLOMORATES;;;Build 3
"RTN","KBANLATT",3,0)
 ; (c) Sam Habiel 2013. All rights reserved.
"RTN","KBANLATT",4,0)
 ;
"RTN","KBANLATT",5,0)
EN(RESULT,DOCHAND) ; Public; Main Latte XML parser routine
"RTN","KBANLATT",6,0)
 ; RESULT - HTTPRSP alias for web server; result to send back to browser; ByRef
"RTN","KBANLATT",7,0)
 ; DOCHAND - MXML Document Hand; By Val
"RTN","KBANLATT",8,0)
 ;
"RTN","KBANLATT",9,0)
 ; Header node
"RTN","KBANLATT",10,0)
 N HDRNODE S HDRNODE=$$XPATH^MXMLPATH(,DOCHAND,"/PEPSRequest/Header")
"RTN","KBANLATT",11,0)
 I 'HDRNODE S $EC=",UHEADER-NODE-MISSING,"
"RTN","KBANLATT",12,0)
 ;
"RTN","KBANLATT",13,0)
 ; Ping Only? If yes, send reply and done.
"RTN","KBANLATT",14,0)
 I $$VALUE^MXMLDOM(DOCHAND,HDRNODE,"pingOnly")="true" D SENDPING^KBANLWRT(.RESULT) QUIT
"RTN","KBANLATT",15,0)
 ;
"RTN","KBANLATT",16,0)
 ; At this point, it's not just a ping. We have to test to see if we have the following requests.
"RTN","KBANLATT",17,0)
 ;
"RTN","KBANLATT",18,0)
 ; See if drugDoseCheck, drugTherapyCheck, drugDrugCheck are requested.
"RTN","KBANLATT",19,0)
 N DRUGDOSECHECK S DRUGDOSECHECK=$$XPATH^MXMLPATH(,DOCHAND,"/PEPSRequest/Body/drugCheck/checks/drugDoseCheck")
"RTN","KBANLATT",20,0)
 N DRUGTHERAPYCHECK S DRUGTHERAPYCHECK=$$XPATH^MXMLPATH(,DOCHAND,"/PEPSRequest/Body/drugCheck/checks/drugTherapyCheck")
"RTN","KBANLATT",21,0)
 N DRUGDRUGCHECK S DRUGDRUGCHECK=$$XPATH^MXMLPATH(,DOCHAND,"/PEPSRequest/Body/drugCheck/checks/drugDrugCheck")
"RTN","KBANLATT",22,0)
 ;
"RTN","KBANLATT",23,0)
 ; DEBUG.ASSERT that we got one of these. No point otherwise!
"RTN","KBANLATT",24,0)
 I '(DRUGDOSECHECK!DRUGTHERAPYCHECK!DRUGDRUGCHECK) S $EC=",UNO-OPERATION-REQUESTED,"
"RTN","KBANLATT",25,0)
 ;
"RTN","KBANLATT",26,0)
 ; Do the real work here
"RTN","KBANLATT",27,0)
 N INTERACTIONS DO DGDG(.INTERACTIONS,DOCHAND):DRUGDRUGCHECK
"RTN","KBANLATT",28,0)
 N DUPCLASS DO DUP(.DUPCLASS,DOCHAND):DRUGTHERAPYCHECK
"RTN","KBANLATT",29,0)
 ;
"RTN","KBANLATT",30,0)
 ; (debug note: zwrite INTERACTIONS and DUPCLASS here to see the results of the checks)
"RTN","KBANLATT",31,0)
 ;
"RTN","KBANLATT",32,0)
 ; Write the XML back in the RESULT array
"RTN","KBANLATT",33,0)
 D RESPOND^KBANLWRT(.RESULT,DOCHAND,.INTERACTIONS,.DUPCLASS,DRUGDRUGCHECK,DRUGTHERAPYCHECK,DRUGDOSECHECK)
"RTN","KBANLATT",34,0)
 ;
"RTN","KBANLATT",35,0)
 QUIT
"RTN","KBANLATT",36,0)
 ;
"RTN","KBANLATT",37,0)
 ; === The rest of the entry points below are private ===
"RTN","KBANLATT",38,0)
 ;
"RTN","KBANLATT",39,0)
DUP(DUPCLASS,DOCHAND) ; Private; Duplicate drug-drug check reply
"RTN","KBANLATT",40,0)
 ; DUPCLASS, return array. See DUPCLASS procedure
"RTN","KBANLATT",41,0)
 ; DOCHAND, see above.
"RTN","KBANLATT",42,0)
 ;
"RTN","KBANLATT",43,0)
 ; Please note dear reader: throughout the routine,
"RTN","KBANLATT",44,0)
 ; the drug IDs in the various return arrays are actually their
"RTN","KBANLATT",45,0)
 ; locations in the parsed MXML Document.
"RTN","KBANLATT",46,0)
 ;
"RTN","KBANLATT",47,0)
 N PROS S PROS=$$PROSPEC(DOCHAND) ; Prospective only?
"RTN","KBANLATT",48,0)
 ;
"RTN","KBANLATT",49,0)
 N DRUGS D DRUGS(.DRUGS,DOCHAND) ; Extract the drugs from the XML document
"RTN","KBANLATT",50,0)
 ;
"RTN","KBANLATT",51,0)
 D DUPCLASS(.DUPCLASS,.DRUGS,PROS) ; Perform duplicate class checking
"RTN","KBANLATT",52,0)
 ;
"RTN","KBANLATT",53,0)
 QUIT
"RTN","KBANLATT",54,0)
DGDG(INTERACTIONS,DOCHAND) ; Private; Drug-Drug interaction check reply
"RTN","KBANLATT",55,0)
 ; INTERACTIONS: Returned array. See INTERACT for definition
"RTN","KBANLATT",56,0)
 ; DOCHAND, see above.
"RTN","KBANLATT",57,0)
 ;
"RTN","KBANLATT",58,0)
 ; Please note dear reader: throughout the routine,
"RTN","KBANLATT",59,0)
 ; the drug IDs in the various return arrays are actually their
"RTN","KBANLATT",60,0)
 ; locations in the parsed MXML Document.
"RTN","KBANLATT",61,0)
 ;
"RTN","KBANLATT",62,0)
 N PROS S PROS=$$PROSPEC(DOCHAND) ; Prospective only?
"RTN","KBANLATT",63,0)
 ;
"RTN","KBANLATT",64,0)
 N DRUGS D DRUGS(.DRUGS,DOCHAND) ; Extract the drugs from the XML document
"RTN","KBANLATT",65,0)
 ;
"RTN","KBANLATT",66,0)
 D INTERACT(.INTERACTIONS,.DRUGS,PROS) ; Perform interaction Checking
"RTN","KBANLATT",67,0)
 ;
"RTN","KBANLATT",68,0)
 QUIT
"RTN","KBANLATT",69,0)
 ;
"RTN","KBANLATT",70,0)
PROSPEC(DOCHAND) ; $$ - Private; Is this Prospective only?
"RTN","KBANLATT",71,0)
 ; DOCHAND, see above.
"RTN","KBANLATT",72,0)
 ; Get Prospective Only flag
"RTN","KBANLATT",73,0)
 ; If we are prospective only, check the prospective drugs against each other and the profile.
"RTN","KBANLATT",74,0)
 ; DO NOT check profile drugs against each other.
"RTN","KBANLATT",75,0)
 ;
"RTN","KBANLATT",76,0)
 ; Get Checks node.
"RTN","KBANLATT",77,0)
 N CHKSNODE S CHKSNODE=$$XPATH^MXMLPATH(,DOCHAND,"//Body/drugCheck/checks")
"RTN","KBANLATT",78,0)
 I 'CHKSNODE S $EC=",UCHECKS-NODE-NOT-FOUND,"
"RTN","KBANLATT",79,0)
 ;
"RTN","KBANLATT",80,0)
 ; Get prospectiveOnly attribute
"RTN","KBANLATT",81,0)
 N VALUE S VALUE=$$VALUE^MXMLDOM(DOCHAND,CHKSNODE,"prospectiveOnly")
"RTN","KBANLATT",82,0)
 N PROSPECTIVEONLY S PROSPECTIVEONLY=0
"RTN","KBANLATT",83,0)
 I $L(VALUE),$$UP^XLFSTR(VALUE)="TRUE" S PROSPECTIVEONLY=1
"RTN","KBANLATT",84,0)
 Q PROSPECTIVEONLY
"RTN","KBANLATT",85,0)
 ;
"RTN","KBANLATT",86,0)
DRUGS(DRUGS,DOCHAND) ; Procedure - Private; Extract drug data from XML document
"RTN","KBANLATT",87,0)
 ; DRUGS: Return Array. Pass by Ref.
"RTN","KBANLATT",88,0)
 ; -- Rosetta Stone:
"RTN","KBANLATT",89,0)
 ;    DRUGS(MXML NODE ID,"TYPE")="P" for Prospective or "M" for Medication Profile
"RTN","KBANLATT",90,0)
 ;                       "VUID") ; VUID from the XML
"RTN","KBANLATT",91,0)
 ;                       "VAPROD") ; Ien in the VA Product File
"RTN","KBANLATT",92,0)
 ;                       "VAGEN") ; Ien in the VA Generic File
"RTN","KBANLATT",93,0)
 ;                       "DINID") ; Drug interaction ID used to query file 56 (Drug Interactions)
"RTN","KBANLATT",94,0)
 ;                       "VACLS") ; VA Drug Class external form (not ien)
"RTN","KBANLATT",95,0)
 ;
"RTN","KBANLATT",96,0)
 ;    Index:
"RTN","KBANLATT",97,0)
 ;    DRUGS("P" or "M",MXML NODE ID)="" ; Used to aid looping in INTERACT
"RTN","KBANLATT",98,0)
 ;
"RTN","KBANLATT",99,0)
 ; DOCHAND - See above
"RTN","KBANLATT",100,0)
 ;
"RTN","KBANLATT",101,0)
 N PROSPDRUGS ; Prospective Drugs
"RTN","KBANLATT",102,0)
 D XPATH^MXMLPATH(.PROSPDRUGS,DOCHAND,"//prospectiveDrugs/drug")
"RTN","KBANLATT",103,0)
 N PROFILEDRUGS ; Profile Drugs
"RTN","KBANLATT",104,0)
 D XPATH^MXMLPATH(.PROFILEDRUGS,DOCHAND,"//medicationProfile/drug")
"RTN","KBANLATT",105,0)
 ;
"RTN","KBANLATT",106,0)
 N X F X="PROSPDRUGS","PROFILEDRUGS" N I S I=0 F  S I=$O(@X@(I)) Q:'I  D  ; Loop through all drug nodes
"RTN","KBANLATT",107,0)
 . S DRUGS(I,"TYPE")=$S(X="PROSPDRUGS":"P",1:"M")
"RTN","KBANLATT",108,0)
 . S DRUGS(DRUGS(I,"TYPE"),I)="" ; Cross reference for looping in INTERACT
"RTN","KBANLATT",109,0)
 . S DRUGS(I,"VUID")=$$VALUE^MXMLDOM(DOCHAND,I,"vuid")
"RTN","KBANLATT",110,0)
 . I 'DRUGS(I,"VUID") S $EC=",UVUIDMISSING,"
"RTN","KBANLATT",111,0)
 . N % S %(1)=DRUGS(I,"VUID") S %(2)=1 ; Compound Index to get master entry
"RTN","KBANLATT",112,0)
 . S DRUGS(I,"VAPROD")=$$FIND1^DIC(50.68,"","QX",.%,"AMASTERVUID")
"RTN","KBANLATT",113,0)
 . I 'DRUGS(I,"VAPROD") S $EC=",UINVALIDVUID,"
"RTN","KBANLATT",114,0)
 . S DRUGS(I,"VAGEN")=$$GET1^DIQ(50.68,DRUGS(I,"VAPROD"),.05,"I") ; VA GENERIC ien
"RTN","KBANLATT",115,0)
 . S DRUGS(I,"VACLS")=$$GET1^DIQ(50.68,DRUGS(I,"VAPROD"),15) ; External VA Drug Class
"RTN","KBANLATT",116,0)
 . S DRUGS(I,"DINID")=DRUGS(I,"VAGEN")_"A"_DRUGS(I,"VAPROD") ; Drug interaction ID
"RTN","KBANLATT",117,0)
 QUIT
"RTN","KBANLATT",118,0)
 ;
"RTN","KBANLATT",119,0)
INTERACT(INTERACTIONS,DRUGS,PROS) ; Procedure - Private; Check drug interactions
"RTN","KBANLATT",120,0)
 ; .INTERACTIONS - Return Array
"RTN","KBANLATT",121,0)
 ; --> Output:
"RTN","KBANLATT",122,0)
 ;     INTERACTIONS(DRUG NODE 1,DRUG NODE 2)=S or C (Significant or Critical)
"RTN","KBANLATT",123,0)
 ;     INTERACTIONS(DRUG NODE 1,DRUG NODE 2,"TITLE")=INTERACTION TITLE
"RTN","KBANLATT",124,0)
 ; .DRUGS - Input Array as above
"RTN","KBANLATT",125,0)
 ; PROS - Is this prospective only? (Boolean)
"RTN","KBANLATT",126,0)
 ;
"RTN","KBANLATT",127,0)
 ; If prospective only, check interactions against each other and
"RTN","KBANLATT",128,0)
 ; and check interactions against profile medications for each.
"RTN","KBANLATT",129,0)
 ;
"RTN","KBANLATT",130,0)
 ; if not prospective only, check interactions for all medications.
"RTN","KBANLATT",131,0)
 ;
"RTN","KBANLATT",132,0)
 ; Please note, subscripts I and J are nodes in the XML document still...
"RTN","KBANLATT",133,0)
 ; We will still use those.
"RTN","KBANLATT",134,0)
 ;
"RTN","KBANLATT",135,0)
 N DONELIST ; A tracker to make sure we don't test stuff against each other again.
"RTN","KBANLATT",136,0)
 IF PROS DO
"RTN","KBANLATT",137,0)
 . ; Loop 1: Check prospective drugs against each other; Concentric loops; There must be an easier way to do this.
"RTN","KBANLATT",138,0)
 . N I S I=0 F  S I=$O(DRUGS("P",I)) Q:'I  N J S J=0 F  S J=$O(DRUGS("P",J)) Q:'J  D
"RTN","KBANLATT",139,0)
 . . ;
"RTN","KBANLATT",140,0)
 . . I I=J QUIT  ; Same drug
"RTN","KBANLATT",141,0)
 . . I $D(DONELIST(I,J)) QUIT  ; Already done
"RTN","KBANLATT",142,0)
 . . I $D(DONELIST(J,I)) QUIT  ; ditto
"RTN","KBANLATT",143,0)
 . . D INTERAC2(.INTERACTIONS,.DRUGS,I,J)
"RTN","KBANLATT",144,0)
 . . S DONELIST(I,J)=""
"RTN","KBANLATT",145,0)
 . ;
"RTN","KBANLATT",146,0)
 . ;
"RTN","KBANLATT",147,0)
 . ; Loop 2: Check prospective drugs against profile; Concentric loops -- this one is easier!!!
"RTN","KBANLATT",148,0)
 . N I S I=0 F  S I=$O(DRUGS("P",I)) Q:'I  N J S J=0 F  S J=$O(DRUGS("M",J)) Q:'J  D
"RTN","KBANLATT",149,0)
 . . D INTERAC2(.INTERACTIONS,.DRUGS,I,J)
"RTN","KBANLATT",150,0)
 ;
"RTN","KBANLATT",151,0)
 ELSE  DO
"RTN","KBANLATT",152,0)
 . ; Only a single loop. Check all drugs against each other.
"RTN","KBANLATT",153,0)
 . N I S I=0 F  S I=$O(DRUGS(I)) Q:'I  N J S J=0 F  S J=$O(DRUGS(J)) Q:'J  D
"RTN","KBANLATT",154,0)
 . . ;
"RTN","KBANLATT",155,0)
 . . I I=J QUIT  ; Same drug
"RTN","KBANLATT",156,0)
 . . I $D(DONELIST(I,J)) QUIT  ; Already done
"RTN","KBANLATT",157,0)
 . . I $D(DONELIST(J,I)) QUIT  ; ditto
"RTN","KBANLATT",158,0)
 . . D INTERAC2(.INTERACTIONS,.DRUGS,I,J)
"RTN","KBANLATT",159,0)
 . . S DONELIST(I,J)=""
"RTN","KBANLATT",160,0)
 QUIT
"RTN","KBANLATT",161,0)
 ;
"RTN","KBANLATT",162,0)
INTERAC2(INTERACTIONS,DRUGS,I,J) ; Private; Core drug interaction code
"RTN","KBANLATT",163,0)
 ; INTERACTIONS - Return array as above
"RTN","KBANLATT",164,0)
 ; I, J are DRUGS array subscripts.
"RTN","KBANLATT",165,0)
 N DINID1 S DINID1=DRUGS(I,"DINID") ; Grab ID
"RTN","KBANLATT",166,0)
 N DINID2 S DINID2=DRUGS(J,"DINID") ; ditto
"RTN","KBANLATT",167,0)
 N INT S INT=$O(^PS(56,"APD",DINID1,DINID2,"")) ; Check drug interaction table
"RTN","KBANLATT",168,0)
 I 'INT QUIT  ; No interaction found
"RTN","KBANLATT",169,0)
 N SEVERITY
"RTN","KBANLATT",170,0)
 S SEVERITY=$P(^PS(56,INT,0),U,4)
"RTN","KBANLATT",171,0)
 S SEVERITY=$S(SEVERITY=1:"C",1:"S") ; Critical or Significant
"RTN","KBANLATT",172,0)
 S INTERACTIONS(I,J)=SEVERITY ; Return array
"RTN","KBANLATT",173,0)
 S INTERACTIONS(I,J,"TITLE")=$P(^PS(56,INT,0),U)
"RTN","KBANLATT",174,0)
 QUIT
"RTN","KBANLATT",175,0)
 ;
"RTN","KBANLATT",176,0)
DUPCLASS(DUPCLASS,DRUGS,PROS) ; Private Proc; Perform duplicate class checking
"RTN","KBANLATT",177,0)
 ; Output:
"RTN","KBANLATT",178,0)
 ; DUPCLASS - Return array formatted as 
"RTN","KBANLATT",179,0)
 ; - DUPCLASS(Drug Node ID 1, Drug Node ID 2)=Duplicate Class Name (full name/external)
"RTN","KBANLATT",180,0)
 ; 
"RTN","KBANLATT",181,0)
 ; ;
"RTN","KBANLATT",182,0)
 ; Input:
"RTN","KBANLATT",183,0)
 ; - DRUGS: Drugs array, as outlined above (by Ref)
"RTN","KBANLATT",184,0)
 ; - PROS: Boolean for Prospective Only (By Value)
"RTN","KBANLATT",185,0)
 ;
"RTN","KBANLATT",186,0)
 N DONELIST ; A tracker to make sure we don't test stuff against each other again.
"RTN","KBANLATT",187,0)
 IF PROS DO
"RTN","KBANLATT",188,0)
 . ; Loop 1: Check prospective drugs against each other; Concentric loops; There must be an easier way to do this.
"RTN","KBANLATT",189,0)
 . N I S I=0 F  S I=$O(DRUGS("P",I)) Q:'I  N J S J=0 F  S J=$O(DRUGS("P",J)) Q:'J  D
"RTN","KBANLATT",190,0)
 . . ;
"RTN","KBANLATT",191,0)
 . . I I=J QUIT  ; Same drug
"RTN","KBANLATT",192,0)
 . . I $D(DONELIST(I,J)) QUIT  ; Already done
"RTN","KBANLATT",193,0)
 . . I $D(DONELIST(J,I)) QUIT  ; ditto
"RTN","KBANLATT",194,0)
 . . D DUPCLAS2(.DUPCLASS,.DRUGS,I,J)
"RTN","KBANLATT",195,0)
 . . S DONELIST(I,J)=""
"RTN","KBANLATT",196,0)
 . ;
"RTN","KBANLATT",197,0)
 . ;
"RTN","KBANLATT",198,0)
 . ; Loop 2: Check prospective drugs against profile; Concentric loops -- this one is easier!!!
"RTN","KBANLATT",199,0)
 . N I S I=0 F  S I=$O(DRUGS("P",I)) Q:'I  N J S J=0 F  S J=$O(DRUGS("M",J)) Q:'J  D
"RTN","KBANLATT",200,0)
 . . D DUPCLAS2(.DUPCLASS,.DRUGS,I,J)
"RTN","KBANLATT",201,0)
 ;
"RTN","KBANLATT",202,0)
 ELSE  DO
"RTN","KBANLATT",203,0)
 . ; Only a single loop. Check all drugs against each other.
"RTN","KBANLATT",204,0)
 . N I S I=0 F  S I=$O(DRUGS(I)) Q:'I  N J S J=0 F  S J=$O(DRUGS(J)) Q:'J  D
"RTN","KBANLATT",205,0)
 . . ;
"RTN","KBANLATT",206,0)
 . . I I=J QUIT  ; Same drug
"RTN","KBANLATT",207,0)
 . . I $D(DONELIST(I,J)) QUIT  ; Already done
"RTN","KBANLATT",208,0)
 . . I $D(DONELIST(J,I)) QUIT  ; ditto
"RTN","KBANLATT",209,0)
 . . D DUPCLAS2(.DUPCLASS,.DRUGS,I,J)
"RTN","KBANLATT",210,0)
 . . S DONELIST(I,J)=""
"RTN","KBANLATT",211,0)
 QUIT
"RTN","KBANLATT",212,0)
 ;
"RTN","KBANLATT",213,0)
DUPCLAS2(DUPCLASS,DRUGS,I,J) ; Private Procedure; Perform Duplicate Dose Checking Core function
"RTN","KBANLATT",214,0)
 ; DUPCLASS - See above
"RTN","KBANLATT",215,0)
 ; DRUGS - See above
"RTN","KBANLATT",216,0)
 ; I and J are DRUGS subscripts.
"RTN","KBANLATT",217,0)
 ;
"RTN","KBANLATT",218,0)
 ; Code here mirrors code in PSODRDUP
"RTN","KBANLATT",219,0)
 ;
"RTN","KBANLATT",220,0)
 N CLS1 S CLS1=$E(DRUGS(I,"VACLS"),1,4) ; Abbreviated Class of first drug
"RTN","KBANLATT",221,0)
 N CLS2 S CLS2=$E(DRUGS(J,"VACLS"),1,4) ; Abbreviated Class of second drug
"RTN","KBANLATT",222,0)
 ;
"RTN","KBANLATT",223,0)
 I CLS1'=CLS2 QUIT  ; Not the same; no duplication
"RTN","KBANLATT",224,0)
 ;
"RTN","KBANLATT",225,0)
 I $E(CLS1,1,2)="HA" QUIT  ; no drug interaction checking on Herbals per PSODRDU1 pre-Mocha version.
"RTN","KBANLATT",226,0)
 I $E(CLS2,1,2)="HA" QUIT  ; ditto
"RTN","KBANLATT",227,0)
 ;
"RTN","KBANLATT",228,0)
 ; Otherwise, we have a duplication.
"RTN","KBANLATT",229,0)
 ; What's the class name?
"RTN","KBANLATT",230,0)
 ; Do an order using the partial class name (4 chars as above) to get to the base class first which ends with a zero.
"RTN","KBANLATT",231,0)
 N CLS,IEN S CLS=$O(^PS(50.605,"B",CLS1)) S IEN=$O(^(CLS,"")) ; Code will crash if we can't find the class. Intended!
"RTN","KBANLATT",232,0)
 N CLASSNAME S CLASSNAME=$P(^PS(50.605,IEN,0),U,2) ; #1 CLASSIFICATION
"RTN","KBANLATT",233,0)
 S DUPCLASS(I,J)=CLASSNAME
"RTN","KBANLATT",234,0)
 QUIT
"RTN","KBANLATT",235,0)
 ;
"RTN","KBANLATT",236,0)
TEST ; M-Unit Entry point for Unit Testing the MOCHA Interface
"RTN","KBANLATT",237,0)
 S IO=$PRINCIPAL
"RTN","KBANLATT",238,0)
 N DIQUIET S DIQUIET=1
"RTN","KBANLATT",239,0)
 D DT^DICRW
"RTN","KBANLATT",240,0)
 D EN^XTMUNIT($T(+0),1)
"RTN","KBANLATT",241,0)
 QUIT
"RTN","KBANLATT",242,0)
 ;
"RTN","KBANLATT",243,0)
CONCHK ; @TEST - Connection Check
"RTN","KBANLATT",244,0)
 N STATUS S STATUS=$$CONCHK^PSSHRIT()
"RTN","KBANLATT",245,0)
 D CHKEQ^XTMUNIT(STATUS,1,"Connection check failed.")
"RTN","KBANLATT",246,0)
 QUIT
"RTN","KBANLATT",247,0)
 ;
"RTN","KBANLATT",248,0)
INTERTST ; @TEST - Drug-Drug Interaction Check
"RTN","KBANLATT",249,0)
 N STATUS S STATUS=$$INTERACT^PSSHRIT()
"RTN","KBANLATT",250,0)
 D CHKEQ^XTMUNIT(STATUS,1,"Drug-drug interaction check failed")
"RTN","KBANLATT",251,0)
 QUIT
"RTN","KBANLATT",252,0)
 ;
"RTN","KBANLATT",253,0)
DUPTHRPY ; @TEST - Duplicate therapy check
"RTN","KBANLATT",254,0)
 N STATUS S STATUS=$$DUPTHRPY^PSSHRIT()
"RTN","KBANLATT",255,0)
 D CHKEQ^XTMUNIT(STATUS,1,"Duplicate therapy check failed")
"RTN","KBANLATT",256,0)
 QUIT
"RTN","KBANLATT",257,0)
 ;
"RTN","KBANLATT",258,0)
DOSECHK ; @TEST - Abnormal Dose Check
"RTN","KBANLATT",259,0)
 N STATUS S STATUS=$$DOSECHK^PSSHRIT()
"RTN","KBANLATT",260,0)
 D CHKEQ^XTMUNIT(STATUS,1,"Abnormal Dose Check failed")
"RTN","KBANLATT",261,0)
 QUIT
"RTN","KBANLATT",262,0)
 ;
"RTN","KBANLATT",263,0)
CUSTOM ; @TEST - Custom drug-drug interaction check
"RTN","KBANLATT",264,0)
 N STATUS S STATUS=$$CUSTOM^PSSHRIT()
"RTN","KBANLATT",265,0)
 D CHKEQ^XTMUNIT(STATUS,1,"Custom drug-drug interaction check")
"RTN","KBANLATT",266,0)
 QUIT
"RTN","KBANLWRT")
0^2^B114360032
"RTN","KBANLWRT",1,0)
KBANLWRT ; VEN/SMH - KBAN Latte Response Writer ;2013-08-06  11:32 AM
"RTN","KBANLWRT",2,0)
 ;;0.4;SAM'S INDUSTRIAL CONGLOMORATES;;;Build 3
"RTN","KBANLWRT",3,0)
 ; (c) Sam Habiel 2013. All rights reserved.
"RTN","KBANLWRT",4,0)
 ;;
"RTN","KBANLWRT",5,0)
 ; All entry points here are private
"RTN","KBANLWRT",6,0)
 ;
"RTN","KBANLWRT",7,0)
SENDPING(RESULT) ; Private; Send a Ping Reply; Internal to this routine.
"RTN","KBANLWRT",8,0)
 ; RESULT - Return array for XML.
"RTN","KBANLWRT",9,0)
 ;
"RTN","KBANLWRT",10,0)
 ; See GTDBINFO^PSSHRQ2O for parsing logic for pings
"RTN","KBANLWRT",11,0)
 ; <?xml version="1.0" encoding="ASCII" standalone="yes"?>
"RTN","KBANLWRT",12,0)
 ; <PEPSResponse xsi:schemaLocation="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
"RTN","KBANLWRT",13,0)
 ;     <Header pingOnly="true">
"RTN","KBANLWRT",14,0)
 ;         <Time value="3130514"/>
"RTN","KBANLWRT",15,0)
 ;         <MServer namespace="" uci="" ip="" serverName="" stationNumber="500"></MServer>
"RTN","KBANLWRT",16,0)
 ;         <MUser userName="PROGRAMMER,ONE" duz="1" jobNumber="7137"></MUser>
"RTN","KBANLWRT",17,0)
 ;         <PEPSVersion difIssueDate="20130324" difBuildVersion="1.0" difDbVersion="3.2"></PEPSVersion>
"RTN","KBANLWRT",18,0)
 ;     </Header>
"RTN","KBANLWRT",19,0)
 ; </PEPSResponse>
"RTN","KBANLWRT",20,0)
 ;
"RTN","KBANLWRT",21,0)
 D PUT^MXMLBLD(.RESULT,$$XMLHDR^MXMLUTL)
"RTN","KBANLWRT",22,0)
 N %
"RTN","KBANLWRT",23,0)
 S %("xsi:schemaLocation")=""
"RTN","KBANLWRT",24,0)
 S %("xmlns:xsi")="http://www.w3.org/2001/XMLSchema-instance"
"RTN","KBANLWRT",25,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("PEPSResponse",.%,,0))
"RTN","KBANLWRT",26,0)
 ;
"RTN","KBANLWRT",27,0)
 N % S %("pingOnly")="true"
"RTN","KBANLWRT",28,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("Header",.%,,0))
"RTN","KBANLWRT",29,0)
 N % S %("value")=DT
"RTN","KBANLWRT",30,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("Time",.%))
"RTN","KBANLWRT",31,0)
 D PEPSVER(.RESULT)
"RTN","KBANLWRT",32,0)
 ;
"RTN","KBANLWRT",33,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/Header"))
"RTN","KBANLWRT",34,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/PEPSResponse"))
"RTN","KBANLWRT",35,0)
 QUIT
"RTN","KBANLWRT",36,0)
 ;
"RTN","KBANLWRT",37,0)
PEPSVER(RESULT) ; Private. Write PEPSVersion tag. Shared among several EPs.
"RTN","KBANLWRT",38,0)
 N REVDATE S REVDATE=1700+$E(DT,1,3)_$E(DT,4,5)_$E(DT,6,7)
"RTN","KBANLWRT",39,0)
 N %
"RTN","KBANLWRT",40,0)
 S %("difIssueDate")=REVDATE
"RTN","KBANLWRT",41,0)
 S %("difBuildVersion")="VISTA"
"RTN","KBANLWRT",42,0)
 S %("difDbVersion")="VISTA"
"RTN","KBANLWRT",43,0)
 S %("customIssueDate")="VISTA"
"RTN","KBANLWRT",44,0)
 S %("customBuildVersion")="VISTA"
"RTN","KBANLWRT",45,0)
 S %("customDbVersion")="VISTA"
"RTN","KBANLWRT",46,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("PEPSVersion",.%))
"RTN","KBANLWRT",47,0)
 QUIT
"RTN","KBANLWRT",48,0)
 ;
"RTN","KBANLWRT",49,0)
RESPOND(RESULT,DOCHAND,INTERACTIONS,DUPCLASS,DRUGDRUGCHECK,DRUGTHERAPYCHECK,DRUGDOSECHECK) ; XML Response Writer; Private
"RTN","KBANLWRT",50,0)
 ; Output:
"RTN","KBANLWRT",51,0)
 ; - .RESULT -> Return array for XML
"RTN","KBANLWRT",52,0)
 ; 
"RTN","KBANLWRT",53,0)
 ; Input:
"RTN","KBANLWRT",54,0)
 ; - DOCHAND -> MXML Original Input document Handle
"RTN","KBANLWRT",55,0)
 ; - .INTERACTIONS -> Array of Interactions. May be empty.
"RTN","KBANLWRT",56,0)
 ; - .DUPCLASS -> Array of duplicate classes. May be empty.
"RTN","KBANLWRT",57,0)
 ; - DRUGDRUGCHECK -> Boolean. Was a drug-drug check requested?
"RTN","KBANLWRT",58,0)
 ; - DRUGTHERAPYCHECK -> Boolean. Was a duplicate drug class check requested?
"RTN","KBANLWRT",59,0)
 ; - DRUGDOSECHECK -> Boolean. Was a dosing check requested?
"RTN","KBANLWRT",60,0)
 ;
"RTN","KBANLWRT",61,0)
 ; Outline:
"RTN","KBANLWRT",62,0)
 ; - Write <?xml
"RTN","KBANLWRT",63,0)
 ; - Open <PEPSResponse>, Write <Header> block, open <Body>, <drugCheck>
"RTN","KBANLWRT",64,0)
 ; - Write specific sections (Drug-Drug, Drug Therapy Duplication, Dosage checks)
"RTN","KBANLWRT",65,0)
 ; - Write </drugCheck>, </Body>, </PEPSResponse>
"RTN","KBANLWRT",66,0)
 ;
"RTN","KBANLWRT",67,0)
 D PUT^MXMLBLD(.RESULT,$$XMLHDR^MXMLUTL) ; <?xml etc...
"RTN","KBANLWRT",68,0)
 ;
"RTN","KBANLWRT",69,0)
 N %
"RTN","KBANLWRT",70,0)
 S %("xsi:schemaLocation")="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/check/response drugCheckSchemaOutput.xsd"
"RTN","KBANLWRT",71,0)
 S %("xmlns:xsi")="http://www.w3.org/2001/XMLSchema-instance"
"RTN","KBANLWRT",72,0)
 S %("xmlns")="gov/va/med/pharmacy/peps/external/common/preencapsulation/vo/drug/check/response"
"RTN","KBANLWRT",73,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("PEPSResponse",.%,,0)) ; <PEPSResponse ...
"RTN","KBANLWRT",74,0)
 ;
"RTN","KBANLWRT",75,0)
 D HEADER(.RESULT)
"RTN","KBANLWRT",76,0)
 ;
"RTN","KBANLWRT",77,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("Body",,,0)) ; <Body>
"RTN","KBANLWRT",78,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugCheck",,,0)) ; <drugCheck>
"RTN","KBANLWRT",79,0)
 ;
"RTN","KBANLWRT",80,0)
 ;
"RTN","KBANLWRT",81,0)
 ;
"RTN","KBANLWRT",82,0)
 D:DRUGDRUGCHECK RITEDGDG(.RESULT,.INTERACTIONS,DOCHAND) ; Drug-Drug Interaction
"RTN","KBANLWRT",83,0)
 D:DRUGTHERAPYCHECK RITEDUP(.RESULT,.DUPCLASS,DOCHAND) ; Duplicate Therapy
"RTN","KBANLWRT",84,0)
 D:DRUGDOSECHECK RITEDOSE(.RESULT) ; Drug-dose check
"RTN","KBANLWRT",85,0)
 ;
"RTN","KBANLWRT",86,0)
 ;
"RTN","KBANLWRT",87,0)
 ; Close
"RTN","KBANLWRT",88,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/drugCheck"))
"RTN","KBANLWRT",89,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/Body"))
"RTN","KBANLWRT",90,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/PEPSResponse"))
"RTN","KBANLWRT",91,0)
 QUIT
"RTN","KBANLWRT",92,0)
 ;
"RTN","KBANLWRT",93,0)
HEADER(RESULT) ; Private; Create XML Header Block.
"RTN","KBANLWRT",94,0)
 ;   <Header>
"RTN","KBANLWRT",95,0)
 ;       <Time value="0845"/>
"RTN","KBANLWRT",96,0)
 ;       <MServer namespace="VISTA" uci="text" ip="127.0.000.1"
"RTN","KBANLWRT",97,0)
 ;           serverName="Server Name" stationNumber="45"/>
"RTN","KBANLWRT",98,0)
 ;       <MUser userName="user" duz="88660079" jobNumber="1001"/>
"RTN","KBANLWRT",99,0)
 ;       <PEPSVersion difIssueDate="20091002" difBuildVersion="6" difDbVersion="3.2"/>
"RTN","KBANLWRT",100,0)
 ;   </Header>
"RTN","KBANLWRT",101,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("Header",,,0)) ; <Header>
"RTN","KBANLWRT",102,0)
 ;
"RTN","KBANLWRT",103,0)
 N % S %("value")=$$NOW^XLFDT() D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("Time",.%)) ; <Time value="0845"/>
"RTN","KBANLWRT",104,0)
 ;
"RTN","KBANLWRT",105,0)
 D  ; <MServer namespace="VISTA" uci="text" ip="127.0.0.1" serverName="Server Name" stationNumber="45" />
"RTN","KBANLWRT",106,0)
 . N Y D GETENV^%ZOSV
"RTN","KBANLWRT",107,0)
 . N %
"RTN","KBANLWRT",108,0)
 . S %("namespace")=$P(Y,U)
"RTN","KBANLWRT",109,0)
 . S %("uci")=$P(Y,U)
"RTN","KBANLWRT",110,0)
 . S %("ip")="127.0.0.1"
"RTN","KBANLWRT",111,0)
 . S %("serverName")=$P(Y,U,3)
"RTN","KBANLWRT",112,0)
 . S %("stationNumber")=$P($$SITE^VASITE(),U,3)
"RTN","KBANLWRT",113,0)
 . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("MServer",.%))
"RTN","KBANLWRT",114,0)
 ;
"RTN","KBANLWRT",115,0)
 D  ; <MUser userName="user" duz="88660079" jobNumber="1001"/>
"RTN","KBANLWRT",116,0)
 . N %
"RTN","KBANLWRT",117,0)
 . S %("duz")=$S($G(DUZ):DUZ,1:.5)
"RTN","KBANLWRT",118,0)
 . S %("userName")=$P(^VA(200,%("duz"),0),U)
"RTN","KBANLWRT",119,0)
 . S %("jobNumber")=$JOB
"RTN","KBANLWRT",120,0)
 . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("MUser",.%))
"RTN","KBANLWRT",121,0)
 ;
"RTN","KBANLWRT",122,0)
 D PEPSVER(.RESULT) ; <PEPSVersion difIssueDate="20091002" difBuildVersion="6" difDbVersion="3.2"/>
"RTN","KBANLWRT",123,0)
 ;
"RTN","KBANLWRT",124,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/Header"))
"RTN","KBANLWRT",125,0)
 QUIT
"RTN","KBANLWRT",126,0)
 ;
"RTN","KBANLWRT",127,0)
 ;
"RTN","KBANLWRT",128,0)
 ;
"RTN","KBANLWRT",129,0)
RITEDGDG(RESULT,INTERACTIONS,DOCHAND) ; Private; Write the XML Response for Drug Interaction part
"RTN","KBANLWRT",130,0)
 ; Output (appending):
"RTN","KBANLWRT",131,0)
 ; - .RESULT
"RTN","KBANLWRT",132,0)
 ;
"RTN","KBANLWRT",133,0)
 ; Input:
"RTN","KBANLWRT",134,0)
 ; - INTERACTIONS
"RTN","KBANLWRT",135,0)
 ; - DOCHAND
"RTN","KBANLWRT",136,0)
 ;
"RTN","KBANLWRT",137,0)
 ; See above for descriptions
"RTN","KBANLWRT",138,0)
 ;
"RTN","KBANLWRT",139,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugDrugChecks",,,0)) ; <drugDrugChecks>
"RTN","KBANLWRT",140,0)
 ;
"RTN","KBANLWRT",141,0)
 ; D1=Drug 1 and D2=Drug 2
"RTN","KBANLWRT",142,0)
 N D1 S D1=0 F  S D1=$O(INTERACTIONS(D1)) Q:'D1  D
"RTN","KBANLWRT",143,0)
 . N D2 S D2=0 F  S D2=$O(INTERACTIONS(D1,D2)) Q:'D2  D
"RTN","KBANLWRT",144,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugDrugCheck",,,0)) ; <drugDrugCheck>
"RTN","KBANLWRT",145,0)
 . . ;
"RTN","KBANLWRT",146,0)
 . . ; Id tag not needed.
"RTN","KBANLWRT",147,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("source",,"VISTA")) ; <source>VISTA</source>; also not needed but I want it.
"RTN","KBANLWRT",148,0)
 . . ;
"RTN","KBANLWRT",149,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("interactedDrugList",,,0)) ; <interactedDrugList>
"RTN","KBANLWRT",150,0)
 . . ;
"RTN","KBANLWRT",151,0)
 . . D  ; <drug orderNumber="Z;2;Prospect" ien="455" gcnSeqNo="25485"/>
"RTN","KBANLWRT",152,0)
 . . . N %
"RTN","KBANLWRT",153,0)
 . . . S %("orderNumber")=$$VALUE^MXMLDOM(DOCHAND,D1,"orderNumber")
"RTN","KBANLWRT",154,0)
 . . . S %("ien")=$$VALUE^MXMLDOM(DOCHAND,D1,"ien")
"RTN","KBANLWRT",155,0)
 . . . S %("vuid")=$$VALUE^MXMLDOM(DOCHAND,D1,"vuid")
"RTN","KBANLWRT",156,0)
 . . . S %("drugName")=$$VALUE^MXMLDOM(DOCHAND,D1,"drugName")
"RTN","KBANLWRT",157,0)
 . . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drug",.%))
"RTN","KBANLWRT",158,0)
 . . ;
"RTN","KBANLWRT",159,0)
 . . D  ; Ditto
"RTN","KBANLWRT",160,0)
 . . . N %
"RTN","KBANLWRT",161,0)
 . . . S %("orderNumber")=$$VALUE^MXMLDOM(DOCHAND,D2,"orderNumber")
"RTN","KBANLWRT",162,0)
 . . . S %("ien")=$$VALUE^MXMLDOM(DOCHAND,D2,"ien")
"RTN","KBANLWRT",163,0)
 . . . S %("vuid")=$$VALUE^MXMLDOM(DOCHAND,D2,"vuid")
"RTN","KBANLWRT",164,0)
 . . . S %("drugName")=$$VALUE^MXMLDOM(DOCHAND,D2,"drugName")
"RTN","KBANLWRT",165,0)
 . . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drug",.%))
"RTN","KBANLWRT",166,0)
 . . ;
"RTN","KBANLWRT",167,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/interactedDrugList")) ; </interactedDrugList>
"RTN","KBANLWRT",168,0)
 . . ;
"RTN","KBANLWRT",169,0)
 . . N SEVTXT S SEVTXT=$S(INTERACTIONS(D1,D2)="C":"Contraindicated Drug Combination",1:"Severe Interaction")
"RTN","KBANLWRT",170,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("severity",,SEVTXT))
"RTN","KBANLWRT",171,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("interaction",,INTERACTIONS(D1,D2,"TITLE")))
"RTN","KBANLWRT",172,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("shortText",,"More information not available in this interface"))
"RTN","KBANLWRT",173,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("professionalMonograph",,,0))
"RTN","KBANLWRT",174,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("disclaimer",,"Disclaimer not available in this interface"))
"RTN","KBANLWRT",175,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("monographTitle",,"MONOGRAPH TITLE:  "_INTERACTIONS(D1,D2,"TITLE")))
"RTN","KBANLWRT",176,0)
 . . ;
"RTN","KBANLWRT",177,0)
 . . N SEVTXT2
"RTN","KBANLWRT",178,0)
 . . I INTERACTIONS(D1,D2)="C" S SEVTXT2="SEVERITY LEVEL:  1-Contraindicated Drug Combination: This drug combination is contraindicated and generally should not be dispensed or administered to the same patient."
"RTN","KBANLWRT",179,0)
 . . E  S SEVTXT2="SEVERITY LEVEL:  2-Severe Interaction: Action is required to reduce the risk of severe adverse interaction."
"RTN","KBANLWRT",180,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("severityLevel",,SEVTXT2)) ; Per PSODDPR3; Must have SEVERITY LEVEL
"RTN","KBANLWRT",181,0)
 . . ;
"RTN","KBANLWRT",182,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("mechanismOfAction",,"MECHANISM OF ACTION:  Mechanism of Action not available in this interface"))
"RTN","KBANLWRT",183,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("clinicalEffects",,"CLINICAL EFFECTS:  Clinical Effects not available in this interface"))
"RTN","KBANLWRT",184,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("preDisposingFactors",,"PREDISPOSING FACTORS:  Pre-Disposing Factors not available in this interface"))
"RTN","KBANLWRT",185,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("patientManagement",,"PATIENT MANAGEMENT:  Patient Management recommendations not available in this interface"))
"RTN","KBANLWRT",186,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("discussion",,"DISCUSSION:  Further discussion not available in this interface"))
"RTN","KBANLWRT",187,0)
 . . ;
"RTN","KBANLWRT",188,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/professionalMonograph"))
"RTN","KBANLWRT",189,0)
 . . ;
"RTN","KBANLWRT",190,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/drugDrugCheck"))
"RTN","KBANLWRT",191,0)
 ;
"RTN","KBANLWRT",192,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/drugDrugChecks"))
"RTN","KBANLWRT",193,0)
 QUIT
"RTN","KBANLWRT",194,0)
 ;
"RTN","KBANLWRT",195,0)
RITEDUP(RESULT,DUPCLASS,DOCHAND) ; Private Proc; Write Duplicate Therapy
"RTN","KBANLWRT",196,0)
 ; Output (appending):
"RTN","KBANLWRT",197,0)
 ; - .RESULT
"RTN","KBANLWRT",198,0)
 ;
"RTN","KBANLWRT",199,0)
 ; Input:
"RTN","KBANLWRT",200,0)
 ; - DUPCLASS
"RTN","KBANLWRT",201,0)
 ; - DOCHAND
"RTN","KBANLWRT",202,0)
 ;
"RTN","KBANLWRT",203,0)
 ; See above for descriptions
"RTN","KBANLWRT",204,0)
 ;
"RTN","KBANLWRT",205,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugTherapyChecks",,,0)) ; <drugTherapyChecks>
"RTN","KBANLWRT",206,0)
 ;
"RTN","KBANLWRT",207,0)
 ; D1=Drug 1 and D2=Drug 2
"RTN","KBANLWRT",208,0)
 N D1 S D1=0 F  S D1=$O(DUPCLASS(D1)) Q:'D1  D
"RTN","KBANLWRT",209,0)
 . N D2 S D2=0 F  S D2=$O(DUPCLASS(D1,D2)) Q:'D2  D
"RTN","KBANLWRT",210,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugTherapyCheck",,,0)) ; <drugTherapyCheck>
"RTN","KBANLWRT",211,0)
 . . ;
"RTN","KBANLWRT",212,0)
 . . ; Id tag not needed.
"RTN","KBANLWRT",213,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("source",,"VISTA")) ; <source>VISTA</source>; also not needed but I want it.
"RTN","KBANLWRT",214,0)
 . . ;
"RTN","KBANLWRT",215,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("interactedDrugList",,,0)) ; <interactedDrugList>
"RTN","KBANLWRT",216,0)
 . . ;
"RTN","KBANLWRT",217,0)
 . . D  ; <drug orderNumber="Z;2;Prospect" ien="455" gcnSeqNo="25485"/>
"RTN","KBANLWRT",218,0)
 . . . N %
"RTN","KBANLWRT",219,0)
 . . . S %("orderNumber")=$$VALUE^MXMLDOM(DOCHAND,D1,"orderNumber")
"RTN","KBANLWRT",220,0)
 . . . S %("ien")=$$VALUE^MXMLDOM(DOCHAND,D1,"ien")
"RTN","KBANLWRT",221,0)
 . . . S %("vuid")=$$VALUE^MXMLDOM(DOCHAND,D1,"vuid")
"RTN","KBANLWRT",222,0)
 . . . S %("drugName")=$$VALUE^MXMLDOM(DOCHAND,D1,"drugName")
"RTN","KBANLWRT",223,0)
 . . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drug",.%))
"RTN","KBANLWRT",224,0)
 . . ;
"RTN","KBANLWRT",225,0)
 . . D  ; Ditto
"RTN","KBANLWRT",226,0)
 . . . N %
"RTN","KBANLWRT",227,0)
 . . . S %("orderNumber")=$$VALUE^MXMLDOM(DOCHAND,D2,"orderNumber")
"RTN","KBANLWRT",228,0)
 . . . S %("ien")=$$VALUE^MXMLDOM(DOCHAND,D2,"ien")
"RTN","KBANLWRT",229,0)
 . . . S %("vuid")=$$VALUE^MXMLDOM(DOCHAND,D2,"vuid")
"RTN","KBANLWRT",230,0)
 . . . S %("drugName")=$$VALUE^MXMLDOM(DOCHAND,D2,"drugName")
"RTN","KBANLWRT",231,0)
 . . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drug",.%))
"RTN","KBANLWRT",232,0)
 . . ;
"RTN","KBANLWRT",233,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/interactedDrugList")) ; </interactedDrugList>
"RTN","KBANLWRT",234,0)
 . . ;
"RTN","KBANLWRT",235,0)
 . . ; Fill classification, duplicateAllowance, shortText
"RTN","KBANLWRT",236,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("classification",,DUPCLASS(D1,D2)))
"RTN","KBANLWRT",237,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("duplicateAllowance",,0))
"RTN","KBANLWRT",238,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("shortText",,"More information not available in this interface"))
"RTN","KBANLWRT",239,0)
 . . ;
"RTN","KBANLWRT",240,0)
 . . D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/drugTherapyCheck")) ; Close this check
"RTN","KBANLWRT",241,0)
 ;
"RTN","KBANLWRT",242,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("/drugTherapyChecks"))
"RTN","KBANLWRT",243,0)
 QUIT
"RTN","KBANLWRT",244,0)
 ;
"RTN","KBANLWRT",245,0)
RITEDOSE(RESULT) ; Private Proc; Write dose - not implmemented in this interface
"RTN","KBANLWRT",246,0)
 ; Send back a correct but empty response.
"RTN","KBANLWRT",247,0)
 D PUT^MXMLBLD(.RESULT,$$MKTAG^MXMLBLD("drugDoseChecks"))
"RTN","KBANLWRT",248,0)
 QUIT
"RTN","PSODDPRE")
0^4^B135966725
"RTN","PSODDPRE",1,0)
PSODDPRE ;BIR/SAB - Enhanced OP order checks ;2013-07-03  2:28 PM
"RTN","PSODDPRE",2,0)
 ;;7.0;OUTPATIENT PHARMACY;**251,375,387,379,390,11310000**;DEC 1997;Build 3
"RTN","PSODDPRE",3,0)
 ;External references PSOL and PSOUL^PSSLOCK supported by DBIA 2789
"RTN","PSODDPRE",4,0)
 ;External references to ^PSSDSAPM supported by DBIA 5570
"RTN","PSODDPRE",5,0)
 ;External references to ^PSSHRQ2 supported by DBIA 5369
"RTN","PSODDPRE",6,0)
 ;External reference to ^PS(50.7 supported by DBIA 2223
"RTN","PSODDPRE",7,0)
 ;External reference to ^PS(55 supported by DBIA 2228
"RTN","PSODDPRE",8,0)
 ;External reference to ^PSDRUG( supported by DBIA 221
"RTN","PSODDPRE",9,0)
 ;External reference to ^PS(50.606 supported by DBIA 2174
"RTN","PSODDPRE",10,0)
 ;External reference to $$SUP^PSSDSAPI supported by DBIA 5425
"RTN","PSODDPRE",11,0)
 ;
"RTN","PSODDPRE",12,0)
 ; VEN/SMH - *11310000 - Keep drugs even if no GCN (as variable SEQN) is available.
"RTN","PSODDPRE",13,0)
 ;
"RTN","PSODDPRE",14,0)
 K IT,^TMP("PSORXDC",$J),^TMP("PSORXDD",$J),CLS,^TMP($J,"PSONVADD"),^TMP($J,"PSONRVADD"),^TMP($J,"PSORDI"),^TMP($J,"PSORMDD")
"RTN","PSODDPRE",15,0)
 N PSONULN,PSODLQT,ZZPSODRG S LIST="PSOPEPS",$P(PSONULN,"-",79)="-",(STA,DNM)=""
"RTN","PSODDPRE",16,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL) Q:$G(PSODLQT)
"RTN","PSODDPRE",17,0)
 F  S STA=$O(PSOSD(STA)) Q:STA=""  F  S DNM=$O(PSOSD(STA,DNM)) Q:DNM=""!$G(PSORX("DFLG"))  I $P(PSOSD(STA,DNM),"^")'=$G(PSORENW("OIRXN")) D  Q:$G(PSORX("DFLG"))
"RTN","PSODDPRE",18,0)
 .I STA="PENDING" D ^PSODDPR1 Q
"RTN","PSODDPRE",19,0)
 .I STA="ZNONVA" D NVA^PSODDPR1 Q
"RTN","PSODDPRE",20,0)
 .D:PSODRUG("NAME")=$P(DNM,"^")&('$D(^XUSEC("PSORPH",DUZ)))  Q:$G(PSORX("DFLG"))
"RTN","PSODDPRE",21,0)
 ..I '$P(PSOPAR,"^",2),'$P(PSOPAR,"^",16) D DUP I $G(PSOTECCK) S PSORX("DFLG")=1 Q
"RTN","PSODDPRE",22,0)
 ..I '$P(PSOPAR,"^",2),$P(PSOPAR,"^",16),$G(PSOTECCK) D DUP Q
"RTN","PSODDPRE",23,0)
 ..I $P(PSOPAR,"^",2),$G(PSOTECCK) D  Q
"RTN","PSODDPRE",24,0)
 ...S DA=+PSOSD(STA,DNM),PSOCLC=DUZ
"RTN","PSODDPRE",25,0)
 ...S MSG="Discontinued During Reinstating Prescription Entry",ACT="Discontinued during Rx Reinstate."
"RTN","PSODDPRE",26,0)
 ...S ^TMP("PSORXDC",$J,DA,0)="52^"_DA_"^"_MSG_"^C^"_ACT_"^"_STA_"^"_DNM,PSONOOR="D",^TMP("PSORXDD",$J)=DNM
"RTN","PSODDPRE",27,0)
 ..I $P($G(PSOPAR),"^",16) D DUP Q
"RTN","PSODDPRE",28,0)
 ..I $P(PSOPAR,"^",2),'$P(PSOPAR,"^",16) D DUP S PSORX("DFLG")=1 Q
"RTN","PSODDPRE",29,0)
 .D:PSODRUG("NAME")=$P(DNM,"^")&($D(^XUSEC("PSORPH",DUZ))) DUP
"RTN","PSODDPRE",30,0)
 K ^TMP($J,"DD"),^TMP($J,"DC"),^TMP($J,"DI"),^TMP($J,"PSODRDI")
"RTN","PSODDPRE",31,0)
 Q:$G(PSORX("DFLG"))
"RTN","PSODDPRE",32,0)
 M ZZPSODRG=PSODRUG
"RTN","PSODDPRE",33,0)
 S LIST="PSOPEPS" D REMOTE^PSOCPPRE
"RTN","PSODDPRE",34,0)
 M PSODRUG=ZZPSODRG
"RTN","PSODDPRE",35,0)
 Q
"RTN","PSODDPRE",36,0)
OBX  ;process enhanced order checks
"RTN","PSODDPRE",37,0)
 K ZDGDG,ZTHER,IT
"RTN","PSODDPRE",38,0)
 S LIST="PSOPEPS" K PSODLQT,DTOUT,DUOUT,DIRUT,PSODOSD
"RTN","PSODDPRE",39,0)
 I $P(^TMP($J,LIST,"OUT",0),"^")=-1 G EXIT
"RTN","PSODDPRE",40,0)
 W !,"Now Processing Enhanced Order Checks!  Please wait...",! H 1
"RTN","PSODDPRE",41,0)
 D FDB S PDRG=PSODRUG("IEN"),DO=0 D IN^PSSHRQ2(LIST)    ;call 2 fdb
"RTN","PSODDPRE",42,0)
 ;
"RTN","PSODDPRE",43,0)
 K DIR
"RTN","PSODDPRE",44,0)
 I $P(^TMP($J,LIST,"OUT",0),"^")=-1 D DATACK G EXIT
"RTN","PSODDPRE",45,0)
 I '$D(PSODGCK) D ^PSODDPR2 ;if order checks returned
"RTN","PSODDPRE",46,0)
 I $D(PSODGCK) D PROC^PSSDIUTL Q  ;if running DX option
"RTN","PSODDPRE",47,0)
 I '$G(PSOCOPY)&('$G(PSORENW)),$G(PSOQUIT) D
"RTN","PSODDPRE",48,0)
 .I $G(PSOREINS) Q:$G(PSODLQT)  S PSORX("DFLG")=1
"RTN","PSODDPRE",49,0)
 ;
"RTN","PSODDPRE",50,0)
EXIT ;
"RTN","PSODDPRE",51,0)
 D ^PSOBUILD
"RTN","PSODDPRE",52,0)
 K CAN,DA,DIR,DNM,DUPRX0,ISSD,J,LSTFL,MSG,PHYS,PSOCLC,PSONULN,REA,RFLS,RX0,RX2,RXN,RXREC,ST,Y,ZZ,ACT,PSOCLOZ,PSOLR,PSOLDT,PSOCD,SIG
"RTN","PSODDPRE",53,0)
 K DO,PDRG,IT,PSODLQT
"RTN","PSODDPRE",54,0)
 K ^TMP($J,LIST,"IN","PING"),^TMP($J,LIST,"OUT","EXCEPTIONS"),^TMP($J,"PSOPEPS"),^TMP($J,"PSORDI")
"RTN","PSODDPRE",55,0)
 Q
"RTN","PSODDPRE",56,0)
DUP S:$P(PSOSD(STA,DNM),"^",2)<10!($P(PSOSD(STA,DNM),"^",2)=16) DUP=1 W !,PSONULN,!,$C(7),"Duplicate Drug in Local Rx:",!
"RTN","PSODDPRE",57,0)
 S RXREC=+PSOSD(STA,DNM),MSG="Discontinued During "_$S('$G(PSONV):"New Prescription Entry",1:"Verification")_" - Duplicate Drug"
"RTN","PSODDPRE",58,0)
DATA S DUPRX0=^PSRX(RXREC,0),RFLS=$P(DUPRX0,"^",9),ISSD=$P(^PSRX(RXREC,0),"^",13),RX0=DUPRX0,RX2=^PSRX(RXREC,2),$P(RX0,"^",15)=+$G(^PSRX(RXREC,"STA"))
"RTN","PSODDPRE",59,0)
 S RXRECLOC=$G(RXREC)
"RTN","PSODDPRE",60,0)
 S DA=RXREC
"RTN","PSODDPRE",61,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL) Q:$G(PSODLQT)
"RTN","PSODDPRE",62,0)
 W !,$J("Rx: ",24)_$P(^PSRX(+PSOSD(STA,DNM),0),"^")
"RTN","PSODDPRE",63,0)
 W !,$J("Drug: ",24)_$P(DNM,"^")
"RTN","PSODDPRE",64,0)
 K FSIG,BSIG I $P($G(^PSRX(RXREC,"SIG")),"^",2) D FSIG^PSOUTLA("R",RXREC,54) F PSREV=1:1 Q:'$D(FSIG(PSREV))  S BSIG(PSREV)=FSIG(PSREV)
"RTN","PSODDPRE",65,0)
 K FSIG,PSREV I '$P($G(^PSRX(RXREC,"SIG")),"^",2) D EN2^PSOUTLA1(RXREC,54)
"RTN","PSODDPRE",66,0)
 W !,$J("SIG: ",24) W $G(BSIG(1))
"RTN","PSODDPRE",67,0)
 I $O(BSIG(1)) F PSREV=1:0 S PSREV=$O(BSIG(PSREV)) Q:'PSREV  W !?24,$G(BSIG(PSREV))
"RTN","PSODDPRE",68,0)
 K BSIG,PSREV
"RTN","PSODDPRE",69,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL) Q:$G(PSODLQT)
"RTN","PSODDPRE",70,0)
 W !,$J("QTY: ",24)_$P(DUPRX0,"^",7),?42,$J("Refills remaining: ",24),RFLS-$S($D(^PSRX(RXREC,1,0)):$P(^(0),"^",4),1:0)
"RTN","PSODDPRE",71,0)
 S PHYS=$S($D(^VA(200,+$P(DUPRX0,"^",4),0)):$P(^(0),"^"),1:"UNKNOWN")
"RTN","PSODDPRE",72,0)
 W !,$J("Provider: ",24)_PHYS,?42,$J("Issued: ",24),$E(ISSD,4,5)_"/"_$E(ISSD,6,7)_"/"_$E(ISSD,2,3)
"RTN","PSODDPRE",73,0)
 W !,$J("Status: ",24) S J=RXREC D STAT^PSOFUNC W ST K RX0,RX2
"RTN","PSODDPRE",74,0)
 S LSTFL=+^PSRX(RXREC,3) W ?42,$J("Last filled: ",24)_$E(LSTFL,4,5)_"/"_$E(LSTFL,6,7)_"/"_$E(LSTFL,2,3)
"RTN","PSODDPRE",75,0)
 D PRSTAT(RXREC)
"RTN","PSODDPRE",76,0)
 W !?42,$J("Days Supply: ",24)_$P(DUPRX0,"^",8)
"RTN","PSODDPRE",77,0)
 W !,PSONULN,! I $P($G(^PS(53,+$P($G(PSORX("PATIENT STATUS")),"^"),0)),"^")["AUTH ABS"!($G(PSORX("PATIENT STATUS"))["AUTH ABS")&'$P(PSOPAR,"^",5) W !,"PATIENT ON AUTHORIZED ABSENCE!" K RXRECLOC Q
"RTN","PSODDPRE",78,0)
ASKCAN I $P(PSOSD(STA,DNM),"^",2)>10,$P(PSOSD(STA,DNM),"^",2)'=16 D  Q
"RTN","PSODDPRE",79,0)
 .K DIR S DIR(0)="E",DIR("?")="Press Return to continue",DIR("A")="Press Return to continue" D ^DIR S:($D(DTOUT))!($D(DUOUT)) PSODLQT=1,PSORX("DFLG")=1 K DIR,DTOUT,DUOUT,DIRUT,RXRECLOC
"RTN","PSODDPRE",80,0)
 .S ^TMP("PSORXDD",$J,RXREC,0)=1
"RTN","PSODDPRE",81,0)
 I '$P(PSOPAR,"^",16),'$D(^XUSEC("PSORPH",DUZ)) D  Q
"RTN","PSODDPRE",82,0)
 .S PSORX("DFLG")=1 K RXRECLOC,DIR S DIR(0)="E",DIR("?")="Press Return to continue",DIR("A")="Press Return to continue"
"RTN","PSODDPRE",83,0)
 .D ^DIR K DIR
"RTN","PSODDPRE",84,0)
 I $P(PSOSD(STA,DNM),"^",2)=16,$G(DUP) D  Q
"RTN","PSODDPRE",85,0)
 .W !!,"Prescription "_$P($G(^PSRX(+$G(RXRECLOC),0)),"^")_" is on Provider Hold, it cannot be discontinued.",!
"RTN","PSODDPRE",86,0)
 .K DUP,DIR,RXRECLOC S PSORX("DFLG")=1 S DIR(0)="E",DIR("?")="Press Return to continue",DIR("A")="Press Return to continue" D ^DIR K DIR
"RTN","PSODDPRE",87,0)
 D PSOL^PSSLOCK(RXRECLOC) I '$G(PSOMSG) D  K PSOMSG,DIR,DUP,RXRECLOC S DIR("A")="Press Return to continue",DIR(0)="E",DIR("?")="Press Return to continue" D ^DIR K DIR S PSORX("DFLG")=1 Q
"RTN","PSODDPRE",88,0)
 .I $P($G(PSOMSG),"^",2)'="" W !!,$P(PSOMSG,"^",2),! Q
"RTN","PSODDPRE",89,0)
 .W !!,"Another person is editing Rx "_$P($G(^PSRX(RXRECLOC,0)),"^"),!
"RTN","PSODDPRE",90,0)
 I $D(PSODGCK) K RXRECLOC,DUP,CLS,PSONOOR Q
"RTN","PSODDPRE",91,0)
 K PSOMSG S DIR("A")=$S($P(PSOSD(STA,DNM),"^",2)=12:"Reinstate",1:"Discontinue")_" RX # "_$P(^PSRX(+PSOSD(STA,DNM),0),"^")_" "_$P(DNM,"^")_" Y/N",DIR(0)="Y"
"RTN","PSODDPRE",92,0)
 S DIR("?")="Enter Y to "_$S($P(PSOSD(STA,DNM),"^",2)=12:"reinstate",1:"discontinue")_" this RX."
"RTN","PSODDPRE",93,0)
 D ^DIR K DIR S DA=RXREC S ACT=$S($D(SPCANC):"Reinstated during Rx cancel.",1:$S($P(PSOSD(STA,DNM),"^",2)=12:"Reinstated",1:"Discontinued")_" while "_$S('$G(PSONV):"entering",1:"verifying")_" new RX")
"RTN","PSODDPRE",94,0)
 D CMOP^PSOUTL I $G(CMOP("S"))="L" W !,"A CMOP Rx cannot be discontinued during transmission!",! S Y=0 K CMOP
"RTN","PSODDPRE",95,0)
 I 'Y W !,$C(7)," -Prescription was not "_$S($P(PSOSD(STA,DNM),"^",2)=12:"reinstated",1:"discontinued")_"..." D  Q
"RTN","PSODDPRE",96,0)
 .S:'$D(PSOCLC) PSOCLC=DUZ S MSG=ACT,REA=$S($P(PSOSD(STA,DNM),"^",2)=12:"R",1:"C") S:$G(DUP) PSORX("DFLG")=1 K DUP D ULRX K RXRECLOC
"RTN","PSODDPRE",97,0)
 .K ^TMP("PSORXDC",$J,RXREC,0)
"RTN","PSODDPRE",98,0)
 I $P(PSOSD(STA,DNM),"^",2)=16,$G(CLS) W !!,"Prescription "_$P($G(^PSRX(+$G(RXRECLOC),0)),"^")_" is on Provider Hold, it cannot be discontinued.",! D ULRX K CLS,DUP,RXRECLOC S PSORX("DFLG")=1 H 2 Q
"RTN","PSODDPRE",99,0)
 S PSOCLC=DUZ,MSG=$S($G(MSG)]"":MSG,1:ACT_" During New RX "_$S('$G(PSONV):"Entry",1:"Verification")_" - Duplicate Rx"),REA=$S($P(PSOSD(STA,DNM),"^",2)=12:"R",1:"C")
"RTN","PSODDPRE",100,0)
 W !! K ^UTILITY($J,"W") S DIWL=1,DIWR=75,DIWF=""
"RTN","PSODDPRE",101,0)
 S X="Rx #"_$P(^PSRX(+PSOSD(STA,DNM),0),"^")_" "_DNM_" will be discontinued after"_$S('$G(PSOTECCK):" the acceptance of the new order.",1:" reinstating the order.") D ^DIWP
"RTN","PSODDPRE",102,0)
 F ZX=0:0 S ZX=$O(^UTILITY($J,"W",1,ZX)) Q:'ZX  W !,^UTILITY($J,"W",1,ZX,0)
"RTN","PSODDPRE",103,0)
 K ^UTILITY($J,"W"),X,DIWL,DIWR,DIWF W !
"RTN","PSODDPRE",104,0)
 S ^TMP("PSORXDC",$J,RXREC,0)="52^"_DA_"^"_MSG_"^"_REA_"^"_ACT_"^"_STA_"^"_DNM,PSONOOR="D",^TMP("PSORXDD",$J)=DNM H 2
"RTN","PSODDPRE",105,0)
 K RXRECLOC,DUP,CLS,PSONOOR
"RTN","PSODDPRE",106,0)
 Q
"RTN","PSODDPRE",107,0)
FDB ;build drug check input
"RTN","PSODDPRE",108,0)
 N ID,ORTYP,PSOI,ORN S DFN=PSODFN,CT=0
"RTN","PSODDPRE",109,0)
 S ID=+$$GETVUID^XTID(50.68,,+$P(PSODRUG("NDF"),"A",2)_",")
"RTN","PSODDPRE",110,0)
 S P1=$P(PSODRUG("NDF"),"A"),P2=$P(PSODRUG("NDF"),"A",2),X=$$PROD0^PSNAPIS(P1,P2),SEQN=+$P(X,"^",7)
"RTN","PSODDPRE",111,0)
 I 'SEQN K ^TMP($J,LIST,"OUT","EXCEPTIONS"),^TMP($J,LIST,"IN") ; VEN/SMH - I think this line is useless. Won't worry about it.
"RTN","PSODDPRE",112,0)
 S ^TMP($J,LIST,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1")=SEQN_"^"_ID_"^"_PSODRUG("IEN")_"^"_$P(^PSDRUG(PSODRUG("IEN"),0),"^")
"RTN","PSODDPRE",113,0)
 K:$D(PSODGCK)&$D(PSODGCKX) ^TMP($J,LIST,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1"),PSODGCKX
"RTN","PSODDPRE",114,0)
 S ^TMP($J,LIST,"IN","IEN")=PSODFN,^TMP($J,LIST,"IN","DRUGDRUG")="",^TMP($J,LIST,"IN","THERAPY")=""
"RTN","PSODDPRE",115,0)
 ;K ID,P1,P2 N ODRG,TU S (STA,DNM)="" I '$G(PSOCOPY),'$G(SEQN) K SEQN Q  ; *11310000 VEN/SMH - old
"RTN","PSODDPRE",116,0)
 K ID,P1,P2 N ODRG,TU S (STA,DNM)=""  ; *11310000 VEN/SMH - new: keep going even if no SEQN
"RTN","PSODDPRE",117,0)
 ;build profile drug order checks
"RTN","PSODDPRE",118,0)
 F  S STA=$O(PSOSD(STA)) Q:STA=""  F  S DNM=$O(PSOSD(STA,DNM)) Q:DNM=""   D  ;I $P(PSOSD(STA,DNM),"^")'=$G(PSORENW("OIRXN")) S CT=CT+1 D
"RTN","PSODDPRE",119,0)
 .Q:$P(PSOSD(STA,DNM),"^")=$G(PSORENW("OIRXN"))&('$G(PSOCOPY))
"RTN","PSODDPRE",120,0)
 .S CT=CT+1
"RTN","PSODDPRE",121,0)
 .I STA="PENDING" N DDRG D
"RTN","PSODDPRE",122,0)
 ..Q:$G(^TMP("PSORXDC",$J,$P(PSOSD(STA,DNM),"^",10),0))]""
"RTN","PSODDPRE",123,0)
 ..Q:$G(PSODRUG("IEN"))=$P(^PS(52.41,$P(PSOSD(STA,DNM),"^",10),0),"^",9)
"RTN","PSODDPRE",124,0)
 ..Q:$P(^PS(52.41,$P(PSOSD(STA,DNM),"^",10),0),"^",3)="RF"
"RTN","PSODDPRE",125,0)
 ..Q:$G(^TMP("PSORXPO",$J,$P(PSOSD(STA,DNM),"^",10),0))
"RTN","PSODDPRE",126,0)
 ..S RXREC=$P(PSOSD(STA,DNM),"^",10),ORN=$P(^PS(52.41,RXREC,0),"^"),ODRG=$P(^(0),"^",9),ORTYP="P"
"RTN","PSODDPRE",127,0)
 ..I ODRG D  K ODRG Q
"RTN","PSODDPRE",128,0)
 ...I $P($G(^PSDRUG(ODRG,0)),"^",3)["S"!($E($P($G(^PSDRUG(ODRG,0)),"^",2),1,2)="XA") Q 
"RTN","PSODDPRE",129,0)
 ...S PDNM=$P(^PSDRUG(ODRG,0),"^") D ID
"RTN","PSODDPRE",130,0)
 ..E  N PSOI,DDRG,ODRG,SEQN,DDRG S PSOI=$P(^PS(52.41,RXREC,0),"^",8) D
"RTN","PSODDPRE",131,0)
 ...S PDNM=$P(^PS(50.7,PSOI,0),"^")_" "_$P(^PS(50.606,$P(^(0),"^",2),0),"^")
"RTN","PSODDPRE",132,0)
 ...S DDRG=$$DRG^PSSDSAPM(PSOI,"O") I '$P(DDRG,";") D OIX Q
"RTN","PSODDPRE",133,0)
 ...I $P($G(^PSDRUG($P(DDRG,";"),0)),"^",3)["S"!($E($P($G(^PSDRUG($P(DDRG,";"),0)),"^",2),1,2)="XA") Q
"RTN","PSODDPRE",134,0)
 ...S ODRG=$P(DDRG,";"),SEQN=+$P(DDRG,";",3) K PSOI
"RTN","PSODDPRE",135,0)
 ...N ID S ID=+$$GETVUID^XTID(50.68,,+$P($G(^PSDRUG(ODRG,"ND")),"^",3)_",")
"RTN","PSODDPRE",136,0)
 ...D ID1
"RTN","PSODDPRE",137,0)
 .I STA="ZNONVA" D  Q
"RTN","PSODDPRE",138,0)
 ..Q:$G(^TMP($J,"PSONVADD",$P(PSOSD(STA,DNM),"^",10),0))]""
"RTN","PSODDPRE",139,0)
 ..S RXREC=$P(PSOSD(STA,DNM),"^",10),ODRG=$P(^PS(55,PSODFN,"NVA",RXREC,0),"^",2),ORN=$P(^(0),"^",8),ORTYP="N"
"RTN","PSODDPRE",140,0)
 ..I ODRG D  K ODRG Q
"RTN","PSODDPRE",141,0)
 ...I $P($G(^PSDRUG(ODRG,0)),"^",3)["S"!($E($P($G(^PSDRUG(ODRG,0)),"^",2),1,2)="XA") Q
"RTN","PSODDPRE",142,0)
 ...S PDNM=$P(^PSDRUG(ODRG,0),"^") D ID
"RTN","PSODDPRE",143,0)
 ..E  N PSOI,DDRG,ODRG,SEQN,DDRG S PSOI=$P(^PS(55,PSODFN,"NVA",RXREC,0),"^") D
"RTN","PSODDPRE",144,0)
 ...S PDNM=$P(^PS(50.7,PSOI,0),"^")_" "_$P(^PS(50.606,$P(^(0),"^",2),0),"^")
"RTN","PSODDPRE",145,0)
 ...S DDRG=$$DRG^PSSDSAPM(PSOI,"X") I '$P(DDRG,";") D:'$$NVATST(PSOI) OIX Q
"RTN","PSODDPRE",146,0)
 ...I $P($G(^PSDRUG($P(DDRG,";"),0)),"^",3)["S"!($E($P($G(^PSDRUG($P(DDRG,";"),0)),"^",2),1,2)="XA") Q
"RTN","PSODDPRE",147,0)
 ...S ODRG=$P(DDRG,";"),SEQN=+$P(DDRG,";",3) K PSOI
"RTN","PSODDPRE",148,0)
 ...N ID S ID=+$$GETVUID^XTID(50.68,,+$P($G(^PSDRUG(ODRG,"ND")),"^",3)_",")
"RTN","PSODDPRE",149,0)
 ...D ID1
"RTN","PSODDPRE",150,0)
 .I $P($G(^PSRX(+PSOSD(STA,DNM),0)),"^",6) D
"RTN","PSODDPRE",151,0)
 ..Q:$G(^TMP("PSORXDC",$J,$P(PSOSD(STA,DNM),"^"),0))]""
"RTN","PSODDPRE",152,0)
 ..Q:$G(^TMP("PSORXBO",$J,$P(PSOSD(STA,DNM),"^"),0))
"RTN","PSODDPRE",153,0)
 ..Q:$G(^TMP("PSORXDD",$J,$P(PSOSD(STA,DNM),"^"),0))
"RTN","PSODDPRE",154,0)
 ..;I $P(PSOSD(STA,DNM),"^",2)>5,$P(PSOSD(STA,DNM),"^",2)'=16 Q
"RTN","PSODDPRE",155,0)
 ..S RXREC=+PSOSD(STA,DNM),ODRG=$P(^PSRX(RXREC,0),"^",6),ORN=$P($G(^("OR1")),"^",2),ORTYP="O"
"RTN","PSODDPRE",156,0)
 ..I ODRG D
"RTN","PSODDPRE",157,0)
 ...I $P($G(^PSDRUG(ODRG,0)),"^",3)["S"!($E($P($G(^PSDRUG(ODRG,0)),"^",2),1,2)="XA") Q
"RTN","PSODDPRE",158,0)
 ...I STA="DISCONTINUED" Q:$$DUPTHER(RXREC)
"RTN","PSODDPRE",159,0)
 ...S PDNM=$P(^PSDRUG(ODRG,0),"^") D ID
"RTN","PSODDPRE",160,0)
 D IMO^PSODDPR7(PSODFN)
"RTN","PSODDPRE",161,0)
 K RXREC,ID,STA,DNM,PSOI,ORN,ODRG,ORTYP,CT,PDNM,TU,DDRG
"RTN","PSODDPRE",162,0)
 Q
"RTN","PSODDPRE",163,0)
 ;
"RTN","PSODDPRE",164,0)
ID N ID,P1,P2,PSODGCKP S ID=+$$GETVUID^XTID(50.68,,+$P($G(^PSDRUG(ODRG,"ND")),"^",3)_",")
"RTN","PSODDPRE",165,0)
 S P1=$P($G(^PSDRUG(ODRG,"ND")),"^"),P2=$P($G(^("ND")),"^",3),X=$$PROD0^PSNAPIS(P1,P2),SEQN=$P(X,"^",7)
"RTN","PSODDPRE",166,0)
ID1 S PSODGCKP=$S($G(PSODGCK):"PROSPECTIVE",1:"PROFILE")
"RTN","PSODDPRE",167,0)
 S ^TMP($J,LIST,"IN",PSODGCKP,$S($D(PSODGCK):"Z",1:ORTYP)_";"_RXREC_";"_PSODGCKP_";"_CT)=SEQN_"^"_ID_"^"_ODRG_"^"_PDNM_"^"_ORN_"^O" K ID
"RTN","PSODDPRE",168,0)
 Q
"RTN","PSODDPRE",169,0)
DUPTHER(RXREC) ;screen out discontinued/duplicate therapy Rx's greater than business rule calculation (cancel date + days supply +7 days)
"RTN","PSODDPRE",170,0)
 ;Note: If the dup allowance is 1 you have to have at least 3 eligible drug orders (or 2 matches) to produce the dupl. therapy warning
"RTN","PSODDPRE",171,0)
 ;Business rule for expired orders is (expiration date+120 days) which is the length of time expired order currently stay on med profile.  No changes for this.
"RTN","PSODDPRE",172,0)
 N X,Y,X1,X2 S X1=$P($G(^PSRX(RXREC,3)),"^",5),X2=(+$P(^PSRX(RXREC,0),"^",8)+7) D C^%DTC I DT>X Q 1
"RTN","PSODDPRE",173,0)
 Q 0
"RTN","PSODDPRE",174,0)
OIX S ^TMP($J,LIST,"IN","EXCEPTIONS","OI",PDNM)=1_"^"_ORTYP_";"_RXREC_";PROFILE;"_CT
"RTN","PSODDPRE",175,0)
 Q
"RTN","PSODDPRE",176,0)
ULRX ;
"RTN","PSODDPRE",177,0)
 I '$G(RXRECLOC) Q
"RTN","PSODDPRE",178,0)
 D PSOUL^PSSLOCK(RXRECLOC)
"RTN","PSODDPRE",179,0)
 Q
"RTN","PSODDPRE",180,0)
 ;
"RTN","PSODDPRE",181,0)
PRSTAT(DA) ;Displays the prescription's status
"RTN","PSODDPRE",182,0)
 N PSOTRANS,PSOREL,PSOCMOP,RXPSTA,PSOX,RFLZRO,PSOLRD,PSORTS,CMOP
"RTN","PSODDPRE",183,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL) Q:$G(PSODLQT)  S RXPSTA="Processing Status: ",PSOLRD=$P($G(^PSRX(RXREC,2)),"^",13)
"RTN","PSODDPRE",184,0)
 D ^PSOCMOPA I $G(PSOCMOP)]"" D  K CMOP,PSOTRANS,PSOREL
"RTN","PSODDPRE",185,0)
 .S PSOTRANS=$E($P(PSOCMOP,"^",2),4,5)_"/"_$E($P(PSOCMOP,"^",2),6,7)_"/"_$E($P(PSOCMOP,"^",2),2,3)
"RTN","PSODDPRE",186,0)
 .S PSOREL=$S(CMOP("L")=0:$P($G(^PSRX(DA,2)),"^",13),1:$P(^PSRX(DA,1,CMOP("L"),0),"^",18))
"RTN","PSODDPRE",187,0)
 .S PSOREL=$E(PSOREL,4,5)_"/"_$E(PSOREL,6,7)_"/"_$E(PSOREL,2,3)_"@"_$E($P(PSOREL,".",2),1,4)
"RTN","PSODDPRE",188,0)
 .I '$D(IOINORM)!('$D(IOINHI)) S X="IORVOFF;IORVON;IOINHI;IOINORM" D ENDR^%ZISS
"RTN","PSODDPRE",189,0)
 .I $P($G(^PSRX(RXREC,"STA")),"^")=0 W:$$TRANCMOP^PSOUTL(RXREC) ?5,IORVON_IOINHI
"RTN","PSODDPRE",190,0)
 .S:$G(PSODUPF) PSODUPC(ZCT)=PSODUPC(ZCT)+1 W:'$G(PSODUPF) !,$J(RXPSTA,24)_$S($P(PSOCMOP,"^")=0!($P(PSOCMOP,"^")=2):"Transmitted to CMOP on "_PSOTRANS,$P(PSOCMOP,"^")=1:"Released by CMOP on "_PSOREL,1:"Not Dispensed"),IOINORM_IORVOFF
"RTN","PSODDPRE",191,0)
 D HD^PSODDPR2():(($Y+5)'>IOSL) Q:$G(PSODLQT)
"RTN","PSODDPRE",192,0)
 I $G(PSOCMOP)']"" D
"RTN","PSODDPRE",193,0)
 .F PSOX=0:0 S PSOX=$O(^PSRX(RXREC,1,PSOX)) Q:'PSOX  D
"RTN","PSODDPRE",194,0)
 ..S RFLZRO=$G(^PSRX(RXREC,1,PSOX,0))
"RTN","PSODDPRE",195,0)
 ..S:$P(RFLZRO,"^",18)'="" PSOLRD=$P(RFLZRO,"^",18) I $P(RFLZRO,"^",16) S PSOLRD=PSOLRD_"^R",PSORTS=$P(RFLZRO,"^",16)
"RTN","PSODDPRE",196,0)
 .I '$O(^PSRX(RXREC,1,0)),$P(^PSRX(RXREC,2),"^",15) S PSOLRD=PSOLRD_"^R",PSORTS=$P(^PSRX(RXREC,2),"^",15)
"RTN","PSODDPRE",197,0)
 .S:$G(PSODUPF) PSODUPC(ZCT)=PSODUPC(ZCT)+1 W:'$G(PSODUPF) !,$J(RXPSTA,24)
"RTN","PSODDPRE",198,0)
 .I +$G(PSORTS) S:$G(PSODUPF) PSODUPC(ZCT)=PSODUPC(ZCT)+1 W:'$G(PSODUPF) "Returned to stock on "_$$FMTE^XLFDT(PSORTS,2) Q
"RTN","PSODDPRE",199,0)
 .S:$G(PSODUPF) PSODUPC(ZCT)=PSODUPC(ZCT)+1 W:'$G(PSODUPF) $S(PSOLRD="":"Not released locally",1:"Released locally on "_$$FMTE^XLFDT($P(PSOLRD,"^"),2)_" "_$P(PSOLRD,"^",2))_$S($P(^PSRX(RXREC,0),"^",11)="W":" (Window)",1:" (Mail)")
"RTN","PSODDPRE",200,0)
 Q
"RTN","PSODDPRE",201,0)
 ;
"RTN","PSODDPRE",202,0)
DATACK ;check FDB returned data to determine whether to continue processing.
"RTN","PSODDPRE",203,0)
 S DIR(0)="E",DIR("A",1)="No Enhanced Order Checks can be performed."
"RTN","PSODDPRE",204,0)
 S DIR("A",2)="   Reason(s): "_$P($G(^TMP($J,LIST,"OUT",0)),"^",2)
"RTN","PSODDPRE",205,0)
 S DIR("A")="Press Return to continue...",DIR("?")="Press Return to continue"
"RTN","PSODDPRE",206,0)
 W ! D ^DIR K DIRUT,DUOUT,DIR,X,Y  W @IOF ;I $P(^TMP($J,LIST,"OUT",0),"^")=1
"RTN","PSODDPRE",207,0)
 Q
"RTN","PSODDPRE",208,0)
 ;
"RTN","PSODDPRE",209,0)
NVATST(PSONVTOI) ; Look for any active Non-VA Dispense Drugs not marked as a supply item
"RTN","PSODDPRE",210,0)
 N PSONVT1,PSONVTFL,PSONVTIN
"RTN","PSODDPRE",211,0)
 S PSONVTFL=1
"RTN","PSODDPRE",212,0)
 F PSONVT1=0:0 S PSONVT1=$O(^PSDRUG("ASP",PSONVTOI,PSONVT1)) Q:'PSONVT1!('PSONVTFL)  D
"RTN","PSODDPRE",213,0)
 .I $P($G(^PSDRUG(PSONVT1,2)),"^",3)'["X" Q
"RTN","PSODDPRE",214,0)
 .S PSONVTIN=$P($G(^PSDRUG(PSONVT1,"I")),"^") I PSONVTIN,PSONVTIN<DT Q
"RTN","PSODDPRE",215,0)
 .S PSONVTFL=$$SUP^PSSDSAPI(PSONVT1)
"RTN","PSODDPRE",216,0)
 Q PSONVTFL
"RTN","PSSHRIT")
0^6^B214661545
"RTN","PSSHRIT",1,0)
PSSHRIT ;WOIFO/SG,PO - Transmits a "ping" to determine if FDB server is down and record the down time ;2013-08-06  4:33 PM
"RTN","PSSHRIT",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136,168,164,11310000**;9/30/97;Build 3
"RTN","PSSHRIT",3,0)
 ;
"RTN","PSSHRIT",4,0)
 ;External reference to IN^PSSHRQ2 supported by DBIA 5369
"RTN","PSSHRIT",5,0)
 ; VEN/SMH - *11310000 - Fixes to incorrect VUID from FOIA in CUSTOM
"RTN","PSSHRIT",6,0)
 ; 
"RTN","PSSHRIT",7,0)
 ;
"RTN","PSSHRIT",8,0)
 Q
"RTN","PSSHRIT",9,0)
PINGCHK ; do ping test, if not passed record it and send a message.
"RTN","PSSHRIT",10,0)
 ; Called from PSS INTERFACE SCHEDULER option
"RTN","PSSHRIT",11,0)
 N STATUS
"RTN","PSSHRIT",12,0)
 F  L +^PS(59.74,"PINGCHK^PSSHRIT"):1 Q:$T
"RTN","PSSHRIT",13,0)
 S STATUS=$$PINGTST()
"RTN","PSSHRIT",14,0)
 S STATUS=$$PINGFILE(STATUS)
"RTN","PSSHRIT",15,0)
 I STATUS=-1 D SMSGDWN   ; if failed for the first time (a new entry created) send a message that interface is down.
"RTN","PSSHRIT",16,0)
 L -^PS(59.74,"PINGCHK^PSSHRIT")
"RTN","PSSHRIT",17,0)
 Q
"RTN","PSSHRIT",18,0)
 ;
"RTN","PSSHRIT",19,0)
PINGTST() ; test the ping by sending a ping request.
"RTN","PSSHRIT",20,0)
 ;return 0 - ping successful,  -1^reason  ping failed
"RTN","PSSHRIT",21,0)
 N BASE,STATUS
"RTN","PSSHRIT",22,0)
 S BASE="PINGTST^"_$T(+0)
"RTN","PSSHRIT",23,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",24,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",25,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",26,0)
 S STATUS=$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",27,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",28,0)
 Q STATUS
"RTN","PSSHRIT",29,0)
 ;
"RTN","PSSHRIT",30,0)
PINGFILE(STATUS) ;  file the ping results
"RTN","PSSHRIT",31,0)
 ; Input
"RTN","PSSHRIT",32,0)
 ;   Status - Ping results
"RTN","PSSHRIT",33,0)
 ; Return 
"RTN","PSSHRIT",34,0)
 ;     -1 - if creates an entry - means the first it noticed PEPS is unavailable
"RTN","PSSHRIT",35,0)
 ;      0 - if does not create/update a record, 
"RTN","PSSHRIT",36,0)
 ;      1 - if updates the last entry
"RTN","PSSHRIT",37,0)
 N LIEN,LASTAVL
"RTN","PSSHRIT",38,0)
 S STATUS=+$G(STATUS)
"RTN","PSSHRIT",39,0)
 S LIEN=+$O(^PS(59.74,":"),-1)           ; get last entry
"RTN","PSSHRIT",40,0)
 S LASTAVL=$P($G(^PS(59.74,LIEN,0)),U,2) ; get last available date/time
"RTN","PSSHRIT",41,0)
 I STATUS=0,'LIEN Q 0                          ; do nothing
"RTN","PSSHRIT",42,0)
 I STATUS=0,LIEN,LASTAVL Q 0                   ; do nothing
"RTN","PSSHRIT",43,0)
 I STATUS=0,LIEN,'LASTAVL D UPDATENT(LIEN) Q 1 ; update file
"RTN","PSSHRIT",44,0)
 I STATUS=-1,LIEN,LASTAVL D NEWENT Q -1        ; create new entry
"RTN","PSSHRIT",45,0)
 I STATUS=-1,'LIEN D NEWENT Q -1               ; create new entry
"RTN","PSSHRIT",46,0)
 Q 0
"RTN","PSSHRIT",47,0)
NEWENT ; create a new entry in FDB INTERFACE DATA (#59.74) file.
"RTN","PSSHRIT",48,0)
 N DIC,DO
"RTN","PSSHRIT",49,0)
 S X=$$NOW^XLFDT(),DIC="^PS(59.74,",DIC(0)="Z" D FILE^DICN
"RTN","PSSHRIT",50,0)
 K X,Y
"RTN","PSSHRIT",51,0)
 Q
"RTN","PSSHRIT",52,0)
 ;
"RTN","PSSHRIT",53,0)
UPDATENT(LAST) ; update the last entry in FDB INTERFACE DATA (#59.74) file.
"RTN","PSSHRIT",54,0)
 ;edit flag once it is created.
"RTN","PSSHRIT",55,0)
 N DIE,NEWVAL,DWNTIME,DA,DR,DIFF
"RTN","PSSHRIT",56,0)
 S DA=LAST
"RTN","PSSHRIT",57,0)
 S NEWVAL=$$NOW^XLFDT()   ;$$NOW()
"RTN","PSSHRIT",58,0)
 S DWNTIME=+$G(^PS(59.74,DA,0))
"RTN","PSSHRIT",59,0)
 Q:'DWNTIME
"RTN","PSSHRIT",60,0)
 S DIFF=$$FMDIFF^XLFDT(NEWVAL,DWNTIME,2)
"RTN","PSSHRIT",61,0)
 S DIFF=DIFF\60  ;IN MINUTES
"RTN","PSSHRIT",62,0)
 S DIE="^PS(59.74,",DR="1///^S X=NEWVAL;2///^S X=DIFF"
"RTN","PSSHRIT",63,0)
 D ^DIE
"RTN","PSSHRIT",64,0)
 D SMSGRST  ; send a message that interface connection is restored
"RTN","PSSHRIT",65,0)
 Q
"RTN","PSSHRIT",66,0)
 ;
"RTN","PSSHRIT",67,0)
SMSGDWN ; send a bulletin that Interface connection is down.
"RTN","PSSHRIT",68,0)
 N XMB,XMTEXT,XMY,PSFDB,XMV,XMDUN,XMDUZ
"RTN","PSSHRIT",69,0)
 S XMDUZ="PSS INTERFACE SCHEDULER"
"RTN","PSSHRIT",70,0)
 S XMB="PSS FDB INTERFACE"
"RTN","PSSHRIT",71,0)
 S XMTEXT="PSFDB"
"RTN","PSSHRIT",72,0)
 ; check to if dosing check is on.
"RTN","PSSHRIT",73,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() D
"RTN","PSSHRIT",74,0)
 .S PSFDB(1)="Connection to Vendor Database is down!  No Drug-Drug Interaction, Duplicate"
"RTN","PSSHRIT",75,0)
 .S PSFDB(2)="Therapy or Dosing Order Checks will be performed until the connection is"
"RTN","PSSHRIT",76,0)
 .S PSFDB(3)="reestablished!!!"
"RTN","PSSHRIT",77,0)
 E  D
"RTN","PSSHRIT",78,0)
 .S PSFDB(1)="Connection to Vendor Database is down!  No Drug-Drug Interaction or Duplicate"
"RTN","PSSHRIT",79,0)
 .S PSFDB(2)="Therapy Order Checks will be performed until the connection is reestablished!!!"
"RTN","PSSHRIT",80,0)
 S XMY("G.PSS ORDER CHECKS")=""
"RTN","PSSHRIT",81,0)
 D ^XMB
"RTN","PSSHRIT",82,0)
 Q
"RTN","PSSHRIT",83,0)
 ;
"RTN","PSSHRIT",84,0)
SMSGRST ; send a bulletin that Interface connection is restored
"RTN","PSSHRIT",85,0)
 N XMB,XMTEXT,XMY,PSFDB,XMV,XMDUN,XMDUZ
"RTN","PSSHRIT",86,0)
 S XMDUZ="PSS INTERFACE SCHEDULER"
"RTN","PSSHRIT",87,0)
 S XMB="PSS FDB INTERFACE RESTORED"
"RTN","PSSHRIT",88,0)
 S XMTEXT="PSFDB"
"RTN","PSSHRIT",89,0)
 ; check to if dosing check is on.
"RTN","PSSHRIT",90,0)
 I $T(DS^PSSDSAPI)]"",$$DS^PSSDSAPI() D
"RTN","PSSHRIT",91,0)
 .S PSFDB(1)="Connection to Vendor Database has been restored! Drug-Drug Interactions,"
"RTN","PSSHRIT",92,0)
 .S PSFDB(2)="Duplicate Therapy and Dosing Order Checks can now be performed."
"RTN","PSSHRIT",93,0)
 E  D
"RTN","PSSHRIT",94,0)
 .S PSFDB(1)="Connection to Vendor Database has been restored! Drug-Drug Interactions or"
"RTN","PSSHRIT",95,0)
 .S PSFDB(2)="Duplicate Therapy Order Checks can now be performed."
"RTN","PSSHRIT",96,0)
 S XMY("G.PSS ORDER CHECKS")=""
"RTN","PSSHRIT",97,0)
 D ^XMB
"RTN","PSSHRIT",98,0)
 Q
"RTN","PSSHRIT",99,0)
 ;
"RTN","PSSHRIT",100,0)
TASKIT(FREQ,START) ; create/update scheduling option start time and frequency
"RTN","PSSHRIT",101,0)
 ; Input:
"RTN","PSSHRIT",102,0)
 ;   FREQ  - Optional - rescheduling frequency in minutes (default 15 minutes)
"RTN","PSSHRIT",103,0)
 ;  START  - Optional - start time (default is current time + 4 minutes)
"RTN","PSSHRIT",104,0)
 ; Note: if START is less than 4 minutes in future,  it will be defaulted to 
"RTN","PSSHRIT",105,0)
 ;       current time + 4 minutes.
"RTN","PSSHRIT",106,0)
 ;
"RTN","PSSHRIT",107,0)
 K PSERROR
"RTN","PSSHRIT",108,0)
 S FREQ=$G(FREQ,15)
"RTN","PSSHRIT",109,0)
 S FREQ=FREQ*60_"S"
"RTN","PSSHRIT",110,0)
 S START=$G(START,$$NOW^XLFDT())
"RTN","PSSHRIT",111,0)
 ;
"RTN","PSSHRIT",112,0)
 ; if start date/time is less than 4 minutes in future make it 4 minutes from now
"RTN","PSSHRIT",113,0)
 S:$$FMDIFF^XLFDT(START,$$NOW^XLFDT(),2)<240 START=$$FMADD^XLFDT($$NOW^XLFDT(),0,0,4)
"RTN","PSSHRIT",114,0)
 ;
"RTN","PSSHRIT",115,0)
 ; create the option schedule if it does not exist. return PSERROR=-1 if fails.
"RTN","PSSHRIT",116,0)
 ; in some situation when it fails, does not create the PSERROR variable
"RTN","PSSHRIT",117,0)
 D RESCH^XUTMOPT("PSS INTERFACE SCHEDULER",START,"",FREQ,"L",.PSERROR)
"RTN","PSSHRIT",118,0)
 Q
"RTN","PSSHRIT",119,0)
 ;
"RTN","PSSHRIT",120,0)
SCHDOPT ; edit option scheduling
"RTN","PSSHRIT",121,0)
 ; Called from "PSS SCHEDULE PEPS INTERFACE CK" option to create and/or edit the scheduling
"RTN","PSSHRIT",122,0)
 ; parameters for "PSS INTERFACE SCHEDULER" option in OPTION SCHEDULING file. 
"RTN","PSSHRIT",123,0)
 ; The "PSS SCHEDULE PEPS INTERFACE CK" option is installed by PAS*1.0*117 package.
"RTN","PSSHRIT",124,0)
 N PSSROOT
"RTN","PSSHRIT",125,0)
 ; check to see if the option is defined in option scheduler file and it is tasked.
"RTN","PSSHRIT",126,0)
 ; if not create and task the option.
"RTN","PSSHRIT",127,0)
 D OPTSTAT^XUTMOPT("PSS INTERFACE SCHEDULER",.PSSROOT)
"RTN","PSSHRIT",128,0)
 I '+$G(PSSROOT(1)) D TASKIT(15)
"RTN","PSSHRIT",129,0)
 ;
"RTN","PSSHRIT",130,0)
 D EDIT^XUTMOPT("PSS INTERFACE SCHEDULER")
"RTN","PSSHRIT",131,0)
 Q
"RTN","PSSHRIT",132,0)
 ;
"RTN","PSSHRIT",133,0)
SLASTRUN(LASTRUN) ; set last run time
"RTN","PSSHRIT",134,0)
 N SUB,PURGE,NOW,DESC
"RTN","PSSHRIT",135,0)
 S DESC="This stores the latest data on FDB interface"
"RTN","PSSHRIT",136,0)
 S NOW=$$NOW^XLFDT()\1
"RTN","PSSHRIT",137,0)
 S PURGE=$$FMADD^XLFDT(NOW,30)
"RTN","PSSHRIT",138,0)
 S ^XTMP("PSSRUN",0)=PURGE_U_NOW_U_DESC
"RTN","PSSHRIT",139,0)
 S ^XTMP("PSSRUN","LASTRUN")=LASTRUN
"RTN","PSSHRIT",140,0)
 Q
"RTN","PSSHRIT",141,0)
 ;
"RTN","PSSHRIT",142,0)
GLASTRUN() ; get last run time
"RTN","PSSHRIT",143,0)
 Q $G(^XTMP("PSSRUN","LASTRUN"))
"RTN","PSSHRIT",144,0)
 ;
"RTN","PSSHRIT",145,0)
RUNTEST ; run interaction test to PEPS server
"RTN","PSSHRIT",146,0)
 ; called from PSS CHECK PEPS SERVICES SETUP option
"RTN","PSSHRIT",147,0)
 D KILL^XUSCLEAN
"RTN","PSSHRIT",148,0)
 N STATUS,X,PSSFLAG,%ZIS,POP,ZTDESC,ZTQUEUED,ZTREQ,ZTRTN
"RTN","PSSHRIT",149,0)
 S PSSFLAG=ION
"RTN","PSSHRIT",150,0)
 ;
"RTN","PSSHRIT",151,0)
 W !!,"This option performs several checks. You may queue this report if you wish."
"RTN","PSSHRIT",152,0)
 W !!,"Among these checks are:"
"RTN","PSSHRIT",153,0)
 W !,"-----------------------"
"RTN","PSSHRIT",154,0)
 W !,"A connection check to the Vendor Database"
"RTN","PSSHRIT",155,0)
 W !,"Drug-Drug Interaction Check"
"RTN","PSSHRIT",156,0)
 W !,"Duplicate Therapy Order Check"
"RTN","PSSHRIT",157,0)
 W !,"Dosing Order Check"
"RTN","PSSHRIT",158,0)
 W !,"Custom Drug-Drug Interaction Check"
"RTN","PSSHRIT",159,0)
 ;
"RTN","PSSHRIT",160,0)
 W ! S %ZIS="MQ",%ZIS("A")="Select Device: " D ^%ZIS G EXIT:POP
"RTN","PSSHRIT",161,0)
 ;
"RTN","PSSHRIT",162,0)
 IF '$D(IO("Q"))&(PSSFLAG=ION) D TESTS^PSSHRIT  Q
"RTN","PSSHRIT",163,0)
 ELSE  IF $D(IO("Q"))!(PSSFLAG'=ION)  D  Q
"RTN","PSSHRIT",164,0)
 .S ZTRTN="QTESTS^PSSHRIT",ZTDESC="Interaction test to PEPS server"
"RTN","PSSHRIT",165,0)
 .D ^%ZTLOAD D HOME^%ZIS,^%ZISC K IO("Q") Q
"RTN","PSSHRIT",166,0)
 ;
"RTN","PSSHRIT",167,0)
EXIT S:$D(ZTQUEUED) ZTREQ="@" Q
"RTN","PSSHRIT",168,0)
 ;
"RTN","PSSHRIT",169,0)
TESTS ; interaction tests to PEPS server
"RTN","PSSHRIT",170,0)
 ;
"RTN","PSSHRIT",171,0)
 S STATUS=$$CONCHK()
"RTN","PSSHRIT",172,0)
 D PRSRTN Q:(STATUS=0)!(X="^") 
"RTN","PSSHRIT",173,0)
 ;
"RTN","PSSHRIT",174,0)
 S STATUS=$$INTERACT()
"RTN","PSSHRIT",175,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",176,0)
 ;
"RTN","PSSHRIT",177,0)
 S STATUS=$$DUPTHRPY()
"RTN","PSSHRIT",178,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",179,0)
 ;
"RTN","PSSHRIT",180,0)
 S STATUS=$$DOSECHK() ;
"RTN","PSSHRIT",181,0)
 D PRSRTN Q:X="^" 
"RTN","PSSHRIT",182,0)
 ;
"RTN","PSSHRIT",183,0)
 S STATUS=$$CUSTOM()
"RTN","PSSHRIT",184,0)
 D PRSRTN Q:X="^"
"RTN","PSSHRIT",185,0)
 ;
"RTN","PSSHRIT",186,0)
 Q
"RTN","PSSHRIT",187,0)
 ;
"RTN","PSSHRIT",188,0)
QTESTS ; queued interaction tests to PEPS server
"RTN","PSSHRIT",189,0)
 ;
"RTN","PSSHRIT",190,0)
 N %,PSSTIME,PSSCOUNT S PSSTIME="",PSSCOUNT=0
"RTN","PSSHRIT",191,0)
 D NOW^%DTC S PSSTIME=$$FMTE^XLFDT(%,"1P")
"RTN","PSSHRIT",192,0)
 W ! F PSSCOUNT=1:1:79 W "-"
"RTN","PSSHRIT",193,0)
 W !!,?15,"Check PEPS Services Setup",?55,PSSTIME,!!
"RTN","PSSHRIT",194,0)
 F PSSCOUNT=1:1:79 W "-"
"RTN","PSSHRIT",195,0)
 W !!
"RTN","PSSHRIT",196,0)
 ;
"RTN","PSSHRIT",197,0)
 S STATUS=$$CONCHK()
"RTN","PSSHRIT",198,0)
 S STATUS=$$INTERACT()
"RTN","PSSHRIT",199,0)
 S STATUS=$$DUPTHRPY()
"RTN","PSSHRIT",200,0)
 S STATUS=$$DOSECHK()
"RTN","PSSHRIT",201,0)
 S STATUS=$$CUSTOM()
"RTN","PSSHRIT",202,0)
 ;
"RTN","PSSHRIT",203,0)
 Q
"RTN","PSSHRIT",204,0)
 ;
"RTN","PSSHRIT",205,0)
CONCHK() ; check connection
"RTN","PSSHRIT",206,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",207,0)
 ; 
"RTN","PSSHRIT",208,0)
 N MESSAGE,Y,STATUS,RESULT
"RTN","PSSHRIT",209,0)
 W !,"Checking Vendor Database Connection"
"RTN","PSSHRIT",210,0)
 S RESULT=$$PINGTST()
"RTN","PSSHRIT",211,0)
 I RESULT=0 D
"RTN","PSSHRIT",212,0)
 .W "...OK"
"RTN","PSSHRIT",213,0)
 E  D
"RTN","PSSHRIT",214,0)
 .W "...",!!,"    Connection could not be made to Vendor database."
"RTN","PSSHRIT",215,0)
 .S Y=$$GLASTRUN()
"RTN","PSSHRIT",216,0)
 .I Y D
"RTN","PSSHRIT",217,0)
 ..D DD^%DT                      ; convert last reached time in Y to external format
"RTN","PSSHRIT",218,0)
 ..W !,"       Last reached @"_$E(Y,1,18)
"RTN","PSSHRIT",219,0)
 W !
"RTN","PSSHRIT",220,0)
 Q $S(RESULT=0:1,1:0)
"RTN","PSSHRIT",221,0)
 ; 
"RTN","PSSHRIT",222,0)
INTERACT() ; check drug-drug interaction.
"RTN","PSSHRIT",223,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",224,0)
 ;
"RTN","PSSHRIT",225,0)
 N PSORDER,PSDRUG1,PSDRUG2,BASE,INFO,INTRO,PSSPEC
"RTN","PSSHRIT",226,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",227,0)
 S BASE=$T(+0)_" INTERACT"
"RTN","PSSHRIT",228,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",229,0)
 S ^TMP($J,BASE,"IN","DRUGDRUG")=""
"RTN","PSSHRIT",230,0)
 S PSORDER="I;1464P;PROSPECTIVE;2",PSDRUG1="WARFARIN 10MG TAB",PSDRUG2="ASPIRIN 325MG TAB"
"RTN","PSSHRIT",231,0)
 SET ^TMP($JOB,BASE,"IN","PROSPECTIVE","I;1464P;PROSPECTIVE;2")="6559^4005201^^WARFARIN 10MG TAB"
"RTN","PSSHRIT",232,0)
 SET ^TMP($JOB,BASE,"IN","PROSPECTIVE","I;91464P;PROSPECTIVE;2")="4376^4005735^^ASPIRIN 325MG TAB"
"RTN","PSSHRIT",233,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",234,0)
 ;
"RTN","PSSHRIT",235,0)
 S INTRO="Performing Drug-Drug Interaction Order Check for "_PSDRUG2_" and "_PSDRUG1
"RTN","PSSHRIT",236,0)
 S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",PSDRUG1,PSORDER,1,"PMON",9,0))
"RTN","PSSHRIT",237,0)
 S INTRO=INTRO_$S($L(INFO):"...OK",1:"...Not OK")
"RTN","PSSHRIT",238,0)
 W !
"RTN","PSSHRIT",239,0)
 I '$L(INFO) D
"RTN","PSSHRIT",240,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",241,0)
 .W ! D OUTPUT("Drug-Drug Interaction Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",242,0)
 E  D
"RTN","PSSHRIT",243,0)
 . D OUTPUT(INTRO)
"RTN","PSSHRIT",244,0)
 . W !
"RTN","PSSHRIT",245,0)
 . S PSSPEC("CLINICAL EFFECTS:  ")=""
"RTN","PSSHRIT",246,0)
 . S INFO=$$REPLACE^XLFSTR(INFO,.PSSPEC)
"RTN","PSSHRIT",247,0)
 . S INFO="Significant Drug Interaction: "_INFO
"RTN","PSSHRIT",248,0)
 . D OUTPUT(INFO,PSSLEFT)
"RTN","PSSHRIT",249,0)
 ;
"RTN","PSSHRIT",250,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",251,0)
 Q $S($L(INFO)=0:0,1:1)
"RTN","PSSHRIT",252,0)
 ;
"RTN","PSSHRIT",253,0)
DUPTHRPY() ; check duplicate therapy
"RTN","PSSHRIT",254,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",255,0)
 ; 
"RTN","PSSHRIT",256,0)
 N PSORDER,PSDRUG1,PSDRUG2,BASE,CLAS1,CLAS2,LINE1,LINE2,INTRO
"RTN","PSSHRIT",257,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",258,0)
 S BASE=$T(+0)_" DUPTHRPY"
"RTN","PSSHRIT",259,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",260,0)
 S ^TMP($J,BASE,"IN","THERAPY")=""
"RTN","PSSHRIT",261,0)
 S PSORDER="O;403931;PROFILE;3"
"RTN","PSSHRIT",262,0)
 S PSDRUG1="CIMETIDINE 300MG TAB"
"RTN","PSSHRIT",263,0)
 S PSDRUG2="RANITIDINE 150MG TAB"
"RTN","PSSHRIT",264,0)
 S ^TMP($J,BASE,"IN","PROFILE","O;403931;PROFILE;3")="11666^4006826^^CIMETIDINE 300MG TAB^O"
"RTN","PSSHRIT",265,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1")="11673^4007038^^RANITIDINE 150MG TAB"
"RTN","PSSHRIT",266,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",267,0)
 ; 
"RTN","PSSHRIT",268,0)
 S CLAS1=$G(^TMP($J,BASE,"OUT","THERAPY",1,1,"CLASS"))
"RTN","PSSHRIT",269,0)
 S CLAS2=$G(^TMP($J,BASE,"OUT","THERAPY",1,2,"CLASS"))
"RTN","PSSHRIT",270,0)
 S INTRO="Performing Duplicate Therapy Order Check for "_PSDRUG1_" and "_PSDRUG2
"RTN","PSSHRIT",271,0)
 S INTRO=INTRO_$S($L(CLAS1):"...OK",1:"...Not OK")
"RTN","PSSHRIT",272,0)
 W !
"RTN","PSSHRIT",273,0)
 D OUTPUT(INTRO)
"RTN","PSSHRIT",274,0)
 I '$L(CLAS1) D
"RTN","PSSHRIT",275,0)
 .W !
"RTN","PSSHRIT",276,0)
 .D OUTPUT("Duplicate Therapy Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",277,0)
 E  D
"RTN","PSSHRIT",278,0)
 .S LINE1="Therapeutic Duplication with "_PSDRUG1_" and "_PSDRUG2
"RTN","PSSHRIT",279,0)
 .S LINE2="Duplicate Therapy Class(es): "_CLAS1_","_CLAS2
"RTN","PSSHRIT",280,0)
 .W !
"RTN","PSSHRIT",281,0)
 .D OUTPUT(LINE1,PSSLEFT)
"RTN","PSSHRIT",282,0)
 .D OUTPUT(LINE2,PSSLEFT)
"RTN","PSSHRIT",283,0)
 ;
"RTN","PSSHRIT",284,0)
 Q $S($L(CLAS1)=0:0,1:1)
"RTN","PSSHRIT",285,0)
 ;
"RTN","PSSHRIT",286,0)
DOSECHK() ; check dosing
"RTN","PSSHRIT",287,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",288,0)
 N TOTAL,SINGLE,INTRO,ORDER,PSDRUG1,PSDRUG2,BASE
"RTN","PSSHRIT",289,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",290,0)
 S BASE=$T(+0)_" DOSECHK"
"RTN","PSSHRIT",291,0)
 S ORDER="O;1464P;PROSPECTIVE;2"
"RTN","PSSHRIT",292,0)
 S PSDRUG1="ACETAMINOPHEN 500MG TAB"
"RTN","PSSHRIT",293,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",294,0)
 S ^TMP($J,BASE,"IN","DOSE")=""
"RTN","PSSHRIT",295,0)
 SET ^TMP($J,BASE,"IN","DOSE","AGE")=5000
"RTN","PSSHRIT",296,0)
 SET ^TMP($J,BASE,"IN","DOSE","WT")=83.01
"RTN","PSSHRIT",297,0)
 SET ^TMP($J,BASE,"IN","DOSE","BSA")=1.532
"RTN","PSSHRIT",298,0)
 ;VALUES: GCN^VUID^IEN^NAME^DOSE AMOUNT^DOSE UNIT^DOSE RATE^FREQ^DURATION^DURATION RATE^ROUTE^DOSE TYPE^SPECIFIC
"RTN","PSSHRIT",299,0)
 S ^TMP($J,BASE,"IN","DOSE","O;1464P;PROSPECTIVE;2")="4490^4007154^^ACETAMINOPHEN 500MG TAB^3000^MILLIGRAMS^DAY^Q4H^10^DAY^ORAL^MAINTENANCE^1"
"RTN","PSSHRIT",300,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","O;1464P;PROSPECTIVE;2")="4490^4007154^^ACETAMINOPHEN 500MG TAB^O"
"RTN","PSSHRIT",301,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",302,0)
 ;
"RTN","PSSHRIT",303,0)
 S TOTAL=$G(^TMP($J,BASE,"OUT","DOSE",ORDER,PSDRUG1,"RANGE","MESSAGE",0))
"RTN","PSSHRIT",304,0)
 S SINGLE=$G(^TMP($J,BASE,"OUT","DOSE",ORDER,PSDRUG1,"SINGLE","MESSAGE",0))
"RTN","PSSHRIT",305,0)
 S INTRO="Performing Dosing Order Check for "_PSDRUG1_" - 3000MG Q4H"_$S($L(TOTAL):"...OK",1:"...Not OK")
"RTN","PSSHRIT",306,0)
 I '$L(TOTAL) D
"RTN","PSSHRIT",307,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",308,0)
 .W !
"RTN","PSSHRIT",309,0)
 .D OUTPUT("Dosing Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",310,0)
 E  D
"RTN","PSSHRIT",311,0)
 .W !
"RTN","PSSHRIT",312,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",313,0)
 .W !
"RTN","PSSHRIT",314,0)
 .D OUTPUT(SINGLE,PSSLEFT)
"RTN","PSSHRIT",315,0)
 .W !
"RTN","PSSHRIT",316,0)
 .D OUTPUT(TOTAL,PSSLEFT)
"RTN","PSSHRIT",317,0)
 Q $S($L(TOTAL)=0:0,1:1)
"RTN","PSSHRIT",318,0)
 ;
"RTN","PSSHRIT",319,0)
CUSTOM() ; check custom drug-drug interaction
"RTN","PSSHRIT",320,0)
 ; Return 1 if OK, 0 if not OK.
"RTN","PSSHRIT",321,0)
 ;
"RTN","PSSHRIT",322,0)
 N INFO,INTRO,ORDER,DRUG1,DRUG2,BASE,STATUS,PSSPEC
"RTN","PSSHRIT",323,0)
 N PSSLEFT S PSSLEFT=4     ; left margin for results
"RTN","PSSHRIT",324,0)
 S BASE=$T(+0)_" CUSTOM"
"RTN","PSSHRIT",325,0)
 S ORDER="Z;1;PROSPECTIVE;1"
"RTN","PSSHRIT",326,0)
 S DRUG1="CLARITHROMYCIN 250MG TAB",DRUG2="DIAZEPAM 5MG TAB"
"RTN","PSSHRIT",327,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",328,0)
 S ^TMP($J,BASE,"IN","DRUGDRUG")=""
"RTN","PSSHRIT",329,0)
 S ^TMP($J,BASE,"IN","PROSPECTIVE","Z;1;PROSPECTIVE;1")="16373^4010075F^^CLARITHROMYCIN 250MG TAB"
"RTN","PSSHRIT",330,0)
 S ^TMP($J,BASE,"IN","PROFILE","I;10U;PROFILE;10")="3768^4002216^^DIAZEPAM 5MG TAB" ; VEN/SMH - Changed b/c VUID wrong in FOIA
"RTN","PSSHRIT",331,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",332,0)
 ;
"RTN","PSSHRIT",333,0)
 S STATUS=$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",334,0)
 S INTRO="Performing Custom Drug-Drug Interaction Order Check for "_DRUG1_" and "_DRUG2
"RTN","PSSHRIT",335,0)
 D SCUST
"RTN","PSSHRIT",336,0)
 S INTRO=INTRO_$S($L(INFO):"...OK",STATUS=0:"...OK",1:"...Not OK")
"RTN","PSSHRIT",337,0)
 I '$L(INFO) D
"RTN","PSSHRIT",338,0)
 .D OUTPUT(INTRO)
"RTN","PSSHRIT",339,0)
 .I STATUS'=0 W ! D OUTPUT("Custom Drug-Drug Interaction Order Check could not be performed.",PSSLEFT)
"RTN","PSSHRIT",340,0)
 E   D
"RTN","PSSHRIT",341,0)
 . W !
"RTN","PSSHRIT",342,0)
 . D OUTPUT(INTRO)
"RTN","PSSHRIT",343,0)
 . W !
"RTN","PSSHRIT",344,0)
 . S PSSPEC("CLINICAL EFFECTS:  ")=""
"RTN","PSSHRIT",345,0)
 . S INFO=$$REPLACE^XLFSTR(INFO,.PSSPEC)
"RTN","PSSHRIT",346,0)
 .S INFO="Significant Drug Interaction: "_INFO
"RTN","PSSHRIT",347,0)
 .D OUTPUT(INFO,PSSLEFT)
"RTN","PSSHRIT",348,0)
 W !
"RTN","PSSHRIT",349,0)
 Q $S(STATUS=0:1,$L(INFO)=0:0,1:1)
"RTN","PSSHRIT",350,0)
 ;
"RTN","PSSHRIT",351,0)
 ;
"RTN","PSSHRIT",352,0)
INTACT ; check vendor data base link
"RTN","PSSHRIT",353,0)
 ; Called from CHECK VENDOR DATABASE LINK  option
"RTN","PSSHRIT",354,0)
 N STATUS,PSFIN,BASE,STATUS,Y
"RTN","PSSHRIT",355,0)
 S BASE="PSPRE"
"RTN","PSSHRIT",356,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",357,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",358,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",359,0)
 S STATUS=+$G(^TMP($J,BASE,"OUT",0))
"RTN","PSSHRIT",360,0)
 I STATUS=0 D
"RTN","PSSHRIT",361,0)
 .W !
"RTN","PSSHRIT",362,0)
 .W !,"  Database Version: ",$G(^TMP($J,BASE,"OUT","difBuildVersion"))
"RTN","PSSHRIT",363,0)
 .W !,"     Build Version: ",$G(^TMP($J,BASE,"OUT","difDbVersion"))
"RTN","PSSHRIT",364,0)
 .S Y=$G(^TMP($J,BASE,"OUT","difIssueDate"))
"RTN","PSSHRIT",365,0)
 .S:Y?8N Y=$E(Y,5,6)_"/"_$E(Y,7,8)_"/"_$E(Y,1,4)
"RTN","PSSHRIT",366,0)
 .W !,"        Issue Date: ",Y,!
"RTN","PSSHRIT",367,0)
 .;
"RTN","PSSHRIT",368,0)
 .W !,"  Custom Database Version: ",$G(^TMP($J,BASE,"OUT","customBuildVersion"))
"RTN","PSSHRIT",369,0)
 .W !,"     Custom Build Version: ",$G(^TMP($J,BASE,"OUT","customDbVersion"))
"RTN","PSSHRIT",370,0)
 .S Y=$G(^TMP($J,BASE,"OUT","customIssueDate"))
"RTN","PSSHRIT",371,0)
 .S:Y?8N Y=$E(Y,5,6)_"/"_$E(Y,7,8)_"/"_$E(Y,1,4)
"RTN","PSSHRIT",372,0)
 .W !,"        Custom Issue Date: ",Y,!
"RTN","PSSHRIT",373,0)
 .;
"RTN","PSSHRIT",374,0)
 .S Y=$$NOW^XLFDT()
"RTN","PSSHRIT",375,0)
 .D DD^%DT                       ; convert current time in Y to external format.
"RTN","PSSHRIT",376,0)
 .W !,"Connected to Vendor database successfully @",$E(Y,1,18)
"RTN","PSSHRIT",377,0)
 E  D
"RTN","PSSHRIT",378,0)
 .W !,"Connection could not be made to Vendor database."
"RTN","PSSHRIT",379,0)
 .S Y=$$GLASTRUN()
"RTN","PSSHRIT",380,0)
 .IF Y D
"RTN","PSSHRIT",381,0)
 ..D DD^%DT                      ; convert last reached time in Y to external format.
"RTN","PSSHRIT",382,0)
 ..W !,"  Last reached @"_$E(Y,1,18)
"RTN","PSSHRIT",383,0)
 ;
"RTN","PSSHRIT",384,0)
 D PRSRTN
"RTN","PSSHRIT",385,0)
 Q
"RTN","PSSHRIT",386,0)
 ;
"RTN","PSSHRIT",387,0)
 ;----------------------------------------------------
"RTN","PSSHRIT",388,0)
 ;
"RTN","PSSHRIT",389,0)
PRSRTN ;
"RTN","PSSHRIT",390,0)
 ;calls std routine to ask user to hit return 
"RTN","PSSHRIT",391,0)
 N DIR S DIR(0)="E" D ^DIR
"RTN","PSSHRIT",392,0)
 Q
"RTN","PSSHRIT",393,0)
 ;
"RTN","PSSHRIT",394,0)
PING(BASE) ;
"RTN","PSSHRIT",395,0)
 K ^TMP($J,BASE)
"RTN","PSSHRIT",396,0)
 S ^TMP($J,BASE,"IN","PING")=""
"RTN","PSSHRIT",397,0)
 D IN^PSSHRQ2(BASE)
"RTN","PSSHRIT",398,0)
 Q
"RTN","PSSHRIT",399,0)
 ;
"RTN","PSSHRIT",400,0)
HRSMIN(MIN) ;
"RTN","PSSHRIT",401,0)
 ; Called from output transform of VENDOR INTERFACE DATA FILE (#59.54) field TOTAL TIME NOT AVAILABLE (field# 2)
"RTN","PSSHRIT",402,0)
 ;INPUTS: MIN-TIME IN MINUTES
"RTN","PSSHRIT",403,0)
 ;RETURNS HRS AND MINUTES
"RTN","PSSHRIT",404,0)
 N HRS,MINHR,HRSMIN
"RTN","PSSHRIT",405,0)
 S HRSMIN=""
"RTN","PSSHRIT",406,0)
 S MINHR=60     ;TOTAL # OF MIN IN AN HR
"RTN","PSSHRIT",407,0)
 S HRS=MIN\MINHR,MIN=MIN#MINHR
"RTN","PSSHRIT",408,0)
 I HRS S HRSMIN=HRS_" HR"_$S(HRS>1:"S",1:"")
"RTN","PSSHRIT",409,0)
 I MIN S HRSMIN=HRSMIN_$S(HRSMIN:", ",1:"")_MIN_" MINUTE"_$S(MIN>1:"S",1:"")
"RTN","PSSHRIT",410,0)
 Q HRSMIN
"RTN","PSSHRIT",411,0)
 ;
"RTN","PSSHRIT",412,0)
OUTPUT(INFO,DIWL) ;
"RTN","PSSHRIT",413,0)
 K ^UTILITY($J,"W")
"RTN","PSSHRIT",414,0)
 N DIWR,DIWF,DIW,DIWT,X
"RTN","PSSHRIT",415,0)
 S DIWL=$G(DIWL,1)
"RTN","PSSHRIT",416,0)
 S X=INFO,DIWR=$S($G(IOM):IOM,1:60),DIWF="W" D ^DIWP
"RTN","PSSHRIT",417,0)
 D ^DIWW
"RTN","PSSHRIT",418,0)
 Q
"RTN","PSSHRIT",419,0)
 ;
"RTN","PSSHRIT",420,0)
 ;
"RTN","PSSHRIT",421,0)
SCUST ;Set Custom info
"RTN","PSSHRIT",422,0)
 I $D(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG1,ORDER,1)) S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG1,ORDER,1,"PMON",9,0)) Q
"RTN","PSSHRIT",423,0)
 I $D(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG2,"I;10U;PROFILE;10",1)) S INFO=$G(^TMP($J,BASE,"OUT","DRUGDRUG","S",DRUG2,"I;10U;PROFILE;10",1,"PMON",9,0)) Q
"RTN","PSSHRIT",424,0)
 S INFO=""
"RTN","PSSHRIT",425,0)
 Q
"RTN","PSSHRIT",426,0)
 ;
"RTN","PSSHRIT",427,0)
VENDRPT ;**Prints out the VENDOR INTERFACE DATA FILE (#59.74) sorted by most recent downtime first**
"RTN","PSSHRIT",428,0)
 ;
"RTN","PSSHRIT",429,0)
 ;The report retrieves the output using the Fileman EN1^DIP data retrieval call
"RTN","PSSHRIT",430,0)
 ;
"RTN","PSSHRIT",431,0)
 W !!,"This report will print out all information related to when and for how long the"
"RTN","PSSHRIT",432,0)
 W !,"vendor interface is unavailable (sorted by most recent down time first)."
"RTN","PSSHRIT",433,0)
 W !,"This information comes from the VENDOR INTERFACE DATA FILE."
"RTN","PSSHRIT",434,0)
 W !!,?15,"*** This has the potential to be a long report ***"
"RTN","PSSHRIT",435,0)
 W !!,"You may queue the report to print if you wish. You may also ""^"" to halt the"
"RTN","PSSHRIT",436,0)
 W !,"report at any time.",!!
"RTN","PSSHRIT",437,0)
 ;
"RTN","PSSHRIT",438,0)
 N DIC,BY,L,DIPCRIT,FR,TO,DHD,DIOBEG,DIOEND,FLDS
"RTN","PSSHRIT",439,0)
 S DIC="^PS(59.74,",BY="-.01",L=0,DIPCRIT=1
"RTN","PSSHRIT",440,0)
 S FR="?,",TO="?,",DHD="VENDOR INTERFACE DATA LIST"
"RTN","PSSHRIT",441,0)
 S DIOBEG="W @IOF"
"RTN","PSSHRIT",442,0)
 S FLDS=".01;""DATE/TIME UNAVAILABLE"",1;""DATE/TIME AVAILABLE"""";C26"",2;""TOTAL DOWNTIME"""
"RTN","PSSHRIT",443,0)
 D EN1^DIP
"RTN","PSSHRIT",444,0)
 Q
"RTN","PSSHRVAL")
0^5^B153337864
"RTN","PSSHRVAL",1,0)
PSSHRVAL ;WOIFO/Alex Vasquez,Timothy Sabat,Steve Gordon - Data Validation routine for drug checks ;2013-07-03  2:13 PM
"RTN","PSSHRVAL",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136,11310000**;9/30/97;Build 3
"RTN","PSSHRVAL",3,0)
 ;
"RTN","PSSHRVAL",4,0)
 ; VEN/SMH - *11310000: Change the logic so that the interface proceeds anyways
"RTN","PSSHRVAL",5,0)
 ; EVEN IF no GCN is provided.
"RTN","PSSHRVAL",6,0)
 ;
"RTN","PSSHRVAL",7,0)
 ;@NOTE: The exception node looks like this.
"RTN","PSSHRVAL",8,0)
 ;PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",9,0)
 ;PSSHASH("Exception","PROSPECTIVE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",10,0)
 ;PSSHASH("Exception","PROFILE",PharmacyOrderNum,Counter)=Gcn,Vuid,IEN,DrugName,CprsOrderNum,Package,Reason,ReasonCode,ResonSource,ReasonText
"RTN","PSSHRVAL",11,0)
 ;PSSHASH("Exception","PatientIenMissing")=""
"RTN","PSSHRVAL",12,0)
 ;PSSHASH("Message")="Failed Validation"
"RTN","PSSHRVAL",13,0)
 ;PSSHASH("ReasonCode")="Reason Code Not Determined Yet"
"RTN","PSSHRVAL",14,0)
 ;
"RTN","PSSHRVAL",15,0)
 ;
"RTN","PSSHRVAL",16,0)
 ;^TMP GLOBAL DATA=GCNSEQNO^VUID^IEN^NAME^DOSE AMOUNT^DOSE UNIT^DOSE RATE^FREQ^DURATION^DURATION RATE^ROUTE^DOSE TYPE^not used^DOSE FORM FLAG
"RTN","PSSHRVAL",17,0)
 ;
"RTN","PSSHRVAL",18,0)
 ;Business rules:
"RTN","PSSHRVAL",19,0)
 ;1. If a prospective" node does not have a GCNSEQNO, it will be KILLED - VEN/SMH: *11310000 Changed
"RTN","PSSHRVAL",20,0)
 ;2.If a "profile" node does not have a GCNSEQNO, it will be KILLED - VEN/SMH: *11310000 Changed
"RTN","PSSHRVAL",21,0)
 ;3.If no prospective nodes exist, DRUGDRUG,THERAPY and DOSE will be killed off
"RTN","PSSHRVAL",22,0)
 ;4.Only checks will be performed for those check nodes that still exist (e.g. DRUGDRUG,
"RTN","PSSHRVAL",23,0)
 ;THERAPY and DOSE)
"RTN","PSSHRVAL",24,0)
 ;If any of the demographics are out of range (age<=0,BSA<0 (or null) or Weight<0 or null) dose node will be killed.
"RTN","PSSHRVAL",25,0)
 ;
"RTN","PSSHRVAL",26,0)
 QUIT
"RTN","PSSHRVAL",27,0)
 ;;
"RTN","PSSHRVAL",28,0)
DRIVER(PSSBASE) ;
"RTN","PSSHRVAL",29,0)
 ;@DRIVER
"RTN","PSSHRVAL",30,0)
 ;@DESC The driver for the validation of drug checks.
"RTN","PSSHRVAL",31,0)
 ;@PSSBASE The base
"RTN","PSSHRVAL",32,0)
 ;
"RTN","PSSHRVAL",33,0)
 NEW PSSHASH
"RTN","PSSHRVAL",34,0)
 ;
"RTN","PSSHRVAL",35,0)
 SET PSSHASH("Base")=PSSBASE
"RTN","PSSHRVAL",36,0)
 SET PSSHASH("ReasonCode")="" ;for version 0.5 version not yet defined.
"RTN","PSSHRVAL",37,0)
 ;
"RTN","PSSHRVAL",38,0)
 DO BUILD(.PSSHASH)
"RTN","PSSHRVAL",39,0)
 ;
"RTN","PSSHRVAL",40,0)
 DO WRITE^PSSHRVL1(.PSSHASH)
"RTN","PSSHRVAL",41,0)
 DO CHKNODES(.PSSHASH)
"RTN","PSSHRVAL",42,0)
 QUIT $$CONTINUE(.PSSHASH)
"RTN","PSSHRVAL",43,0)
 ;
"RTN","PSSHRVAL",44,0)
CHKNODES(PSSHASH) ;
"RTN","PSSHRVAL",45,0)
 ;@DESC Determines which nodes should be killed off or kept
"RTN","PSSHRVAL",46,0)
 ;
"RTN","PSSHRVAL",47,0)
 ;SET DoseValue,"Demo" PSSHASH array to kill off dose node
"RTN","PSSHRVAL",48,0)
 NEW ORDER
"RTN","PSSHRVAL",49,0)
 ;
"RTN","PSSHRVAL",50,0)
 SET ORDER=""
"RTN","PSSHRVAL",51,0)
 IF '$L($O(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",ORDER))) DO
"RTN","PSSHRVAL",52,0)
 .;If only send in profile with profile flag OK
"RTN","PSSHRVAL",53,0)
 .I $D(^TMP($JOB,PSSHASH("Base"),"IN","PROFILEVPROFILE"))&($L($O(^TMP($JOB,PSSHASH("Base"),"IN","PROFILE",ORDER)))) Q
"RTN","PSSHRVAL",54,0)
 .DO KILLALL^PSSHRVL1(PSSHASH("Base"))
"RTN","PSSHRVAL",55,0)
 IF '$L($O(^TMP($JOB,PSSHASH("Base"),"IN","DOSE",ORDER)))!$D(PSSHASH("DoseValue","Demo")) DO
"RTN","PSSHRVAL",56,0)
 .DO KILLCHEK^PSSHRVL1("DOSE",PSSHASH("Base"))
"RTN","PSSHRVAL",57,0)
 QUIT
"RTN","PSSHRVAL",58,0)
 ;
"RTN","PSSHRVAL",59,0)
CONTINUE(PSSHASH) ;
"RTN","PSSHRVAL",60,0)
 ;@DESC Determines whether or not to proceed with checks.
"RTN","PSSHRVAL",61,0)
 ;@RETURNS 1 if you may continue, 0 if not.
"RTN","PSSHRVAL",62,0)
 ;
"RTN","PSSHRVAL",63,0)
 NEW PSS
"RTN","PSSHRVAL",64,0)
 SET PSS("AnyChecksLeft")=0
"RTN","PSSHRVAL",65,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DRUGDRUG"))
"RTN","PSSHRVAL",66,0)
  . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",67,0)
  . QUIT 
"RTN","PSSHRVAL",68,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","THERAPY"))
"RTN","PSSHRVAL",69,0)
 . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",70,0)
 . QUIT
"RTN","PSSHRVAL",71,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DOSE"))
"RTN","PSSHRVAL",72,0)
 . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",73,0)
 . QUIT
"RTN","PSSHRVAL",74,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","PING"))
"RTN","PSSHRVAL",75,0)
  . SET PSS("AnyChecksLeft")=1
"RTN","PSSHRVAL",76,0)
  . QUIT
"RTN","PSSHRVAL",77,0)
 QUIT PSS("AnyChecksLeft")
"RTN","PSSHRVAL",78,0)
 ;
"RTN","PSSHRVAL",79,0)
BUILD(PSSHASH) ;
"RTN","PSSHRVAL",80,0)
 ;@DESC Builds the internal hash used to parse for errors.
"RTN","PSSHRVAL",81,0)
 ;@PSSHASH The internal variables.
"RTN","PSSHRVAL",82,0)
 ;DO CHKINEXP(.PSSHASH)
"RTN","PSSHRVAL",83,0)
 DO CHKINEXP(.PSSHASH) ;CHK FOR "IN" EXCEPTIONS
"RTN","PSSHRVAL",84,0)
 DO DRUGPROS(.PSSHASH)
"RTN","PSSHRVAL",85,0)
 DO DRUGPROF(.PSSHASH)
"RTN","PSSHRVAL",86,0)
 QUIT
"RTN","PSSHRVAL",87,0)
 ;
"RTN","PSSHRVAL",88,0)
CHKINEXP(PSSHASH) ;
"RTN","PSSHRVAL",89,0)
 ;INPUT PSSHASH array
"RTN","PSSHRVAL",90,0)
 ;PSSHASH("Exception",TYPE,"DOSE",PSS("PharmOrderNum"),COUNTER)
"RTN","PSSHRVAL",91,0)
 ;PSSHASH("Exception",TYPE,PSS("PharmOrderNum"),COUNTER)
"RTN","PSSHRVAL",92,0)
 I $D(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI")) D OIEXP(.PSSHASH)
"RTN","PSSHRVAL",93,0)
 I $D(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE")) D DOSINEXP(.PSSHASH)
"RTN","PSSHRVAL",94,0)
 Q
"RTN","PSSHRVAL",95,0)
 ;
"RTN","PSSHRVAL",96,0)
DRUGPROS(PSSHASH) ;
"RTN","PSSHRVAL",97,0)
 ;@DESC Loops on the prospective drugs
"RTN","PSSHRVAL",98,0)
 ;@PSSHASH The internal variables.
"RTN","PSSHRVAL",99,0)
 ;
"RTN","PSSHRVAL",100,0)
 NEW PSS
"RTN","PSSHRVAL",101,0)
 SET PSS("ProspectiveOrProfile")="PROSPECTIVE"
"RTN","PSSHRVAL",102,0)
 SET PSS("PharmOrderNum")=""
"RTN","PSSHRVAL",103,0)
 ;
"RTN","PSSHRVAL",104,0)
 FOR  SET PSS("PharmOrderNum")=$ORDER(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))) QUIT:PSS("PharmOrderNum")=""  DO
"RTN","PSSHRVAL",105,0)
  . SET PSS("DrugValue")=^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))
"RTN","PSSHRVAL",106,0)
  . ; DO CHECKGCN(.PSS,.PSSHASH) ; VEN/SMH *11310000 Don't check for GCN.
"RTN","PSSHRVAL",107,0)
  . DO CHECKDOS(.PSS,.PSSHASH)
"RTN","PSSHRVAL",108,0)
  . QUIT
"RTN","PSSHRVAL",109,0)
 QUIT
"RTN","PSSHRVAL",110,0)
 ;
"RTN","PSSHRVAL",111,0)
DEMOGRAF(PSS,PSSHASH,PSDRUG) ;
"RTN","PSSHRVAL",112,0)
 ;@DESC Validates the demographic info
"RTN","PSSHRVAL",113,0)
 ;@PSSHASH The hash the demographic info is stored in
"RTN","PSSHRVAL",114,0)
 ;
"RTN","PSSHRVAL",115,0)
 ;Gcn
"RTN","PSSHRVAL",116,0)
 N AGE,WEIGHT,BSA,MESSAGE,ORDER
"RTN","PSSHRVAL",117,0)
 ;
"RTN","PSSHRVAL",118,0)
 SET PSS("T")=$PIECE(PSS("DoseValue"),"^",1)_"^"
"RTN","PSSHRVAL",119,0)
 ;Vuid
"RTN","PSSHRVAL",120,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",2)_"^"
"RTN","PSSHRVAL",121,0)
 ;Ien
"RTN","PSSHRVAL",122,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",3)_"^"
"RTN","PSSHRVAL",123,0)
 ;DrugName
"RTN","PSSHRVAL",124,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",4)_"^"
"RTN","PSSHRVAL",125,0)
 ;CprsOrderNumber
"RTN","PSSHRVAL",126,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",5)_"^"
"RTN","PSSHRVAL",127,0)
 ;Package
"RTN","PSSHRVAL",128,0)
 SET PSS("T")=PSS("T")_$PIECE(PSS("DoseValue"),"^",6)_"^"
"RTN","PSSHRVAL",129,0)
 ;Reason
"RTN","PSSHRVAL",130,0)
 ;SET PSS("T")=PSS("T")_PSSHASH("Message")_"^"
"RTN","PSSHRVAL",131,0)
  I $D(^TMP($JOB,PSSHASH("Base"),"IN","DOSE")) D
"RTN","PSSHRVAL",132,0)
  .S AGE=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","AGE"))
"RTN","PSSHRVAL",133,0)
  .S WEIGHT=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","WT"))
"RTN","PSSHRVAL",134,0)
  .S BSA=+$G(^TMP($J,PSSHASH("Base"),"IN","DOSE","BSA"))
"RTN","PSSHRVAL",135,0)
  . ;Validate age in days exists or BSA or Weight are less than zero.
"RTN","PSSHRVAL",136,0)
  .S MESSAGE=$$DEMOCHK^PSSHRVL1(AGE,BSA,WEIGHT,PSDRUG) Q:'$L(MESSAGE)  ;IF NO ISSUE DON'T GO ANY FURTHER
"RTN","PSSHRVAL",137,0)
  .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,0)
"RTN","PSSHRVAL",138,0)
  .;This is already looping through all dose nodes from DRUGPROS
"RTN","PSSHRVAL",139,0)
  .;IF BAD DEMOGRAPHIC Set array node below and have CHKNODES tag kill Dose node
"RTN","PSSHRVAL",140,0)
  .S PSSHASH("DoseValue","Demo")=""
"RTN","PSSHRVAL",141,0)
 KILL PSS("T")
"RTN","PSSHRVAL",142,0)
 QUIT 
"RTN","PSSHRVAL",143,0)
 ;
"RTN","PSSHRVAL",144,0)
CHECKDOS(PSS,PSSHASH) ; 
"RTN","PSSHRVAL",145,0)
 ;@DESC Check if the dose exists.
"RTN","PSSHRVAL",146,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",147,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",148,0)
 N DOSEVALUE,DOSE,DOSEUNIT,DOSERATE,FREQ,DURATION,DURRATE,ROUTE,DOSETYPE,DRUGNM,MESSAGE
"RTN","PSSHRVAL",149,0)
 DO:$DATA(^TMP($JOB,PSSHASH("Base"),"IN","DOSE",PSS("PharmOrderNum")))
"RTN","PSSHRVAL",150,0)
  .;if prospective killed off then GCN bad-no need to go any further
"RTN","PSSHRVAL",151,0)
  .I '$DATA(^TMP($JOB,PSSHASH("Base"),"IN","PROSPECTIVE",PSS("PharmOrderNum"))) Q
"RTN","PSSHRVAL",152,0)
  . SET PSS("DoseValue")=^TMP($JOB,PSSHASH("Base"),"IN","DOSE",PSS("PharmOrderNum"))
"RTN","PSSHRVAL",153,0)
  . SET PSS("Package")=""
"RTN","PSSHRVAL",154,0)
  . SET PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",155,0)
  . ;
"RTN","PSSHRVAL",156,0)
  . ;I '$$DEMOGRAF(.PSS,.PSSHASH) Q  ;Check age and other parameters
"RTN","PSSHRVAL",157,0)
  . ;If this is a "specific" call
"RTN","PSSHRVAL",158,0)
  . ;SET PSS("Package")="N/A"
"RTN","PSSHRVAL",159,0)
  . ;SET PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",160,0)
  . ;SET PSS("Message")=PSSHASH("Message")
"RTN","PSSHRVAL",161,0)
  . S DOSEVALUE=PSS("DoseValue")
"RTN","PSSHRVAL",162,0)
  . S DRUGNM=$P(DOSEVALUE,U,4)
"RTN","PSSHRVAL",163,0)
  . S DOSE=$P(DOSEVALUE,U,5),DOSEUNIT=$P(DOSEVALUE,U,6),DOSERATE=$P(DOSEVALUE,U,7)
"RTN","PSSHRVAL",164,0)
  . S FREQ=$P(DOSEVALUE,U,8),DURATION=$P(DOSEVALUE,U,9)
"RTN","PSSHRVAL",165,0)
  . S DURRATE=$P(DOSEVALUE,U,10),ROUTE=$P(DOSEVALUE,U,11),DOSETYPE=$P(DOSEVALUE,U,12)
"RTN","PSSHRVAL",166,0)
  . ;Check piece 12--if not set correctly go no further
"RTN","PSSHRVAL",167,0)
  . S MESSAGE=$$CHKDSTYP^PSSHRVL1(DOSETYPE,DRUGNM) I $L(MESSAGE) D  Q
"RTN","PSSHRVAL",168,0)
  . . D SETDSEXP(.PSS,.PSSHASH,MESSAGE,12)
"RTN","PSSHRVAL",169,0)
  . D DEMOGRAF(.PSS,.PSSHASH,DRUGNM)  ;Check age and other parameters
"RTN","PSSHRVAL",170,0)
  . ;set defaults for all possible errors
"RTN","PSSHRVAL",171,0)
  . ;check piece 5 dose
"RTN","PSSHRVAL",172,0)
  . S MESSAGE=$$CHKDOSE^PSSHRVL1(DOSE,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",173,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,5)
"RTN","PSSHRVAL",174,0)
  . ;check piece 6-dose units
"RTN","PSSHRVAL",175,0)
  . S MESSAGE=$$CHKUNIT^PSSHRVL1(DOSEUNIT,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",176,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,6)
"RTN","PSSHRVAL",177,0)
  . ;Check piece 7--dose rate
"RTN","PSSHRVAL",178,0)
  . S MESSAGE=$$CHKRATE^PSSHRVL1(DOSERATE,"DOSE",DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",179,0)
  . . D SETDSEXP(.PSS,.PSSHASH,MESSAGE,7)
"RTN","PSSHRVAL",180,0)
  . ;Check Piece 8--frequency
"RTN","PSSHRVAL",181,0)
  . S MESSAGE=$$CHKFREQ^PSSHRVL1(FREQ) I $L(MESSAGE) D
"RTN","PSSHRVAL",182,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,8)
"RTN","PSSHRVAL",183,0)
  . ;Check piece 9-duration
"RTN","PSSHRVAL",184,0)
  . S MESSAGE=$$CHKDRATN^PSSHRVL1(DURATION,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",185,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,9)
"RTN","PSSHRVAL",186,0)
  . ;Check piece 10-DURATION RATE
"RTN","PSSHRVAL",187,0)
  . S MESSAGE=$$CHKRATE^PSSHRVL1(DURRATE,"DURATION",DRUGNM,DURATION) I $L(MESSAGE) D
"RTN","PSSHRVAL",188,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,10)
"RTN","PSSHRVAL",189,0)
  . ;PIECE 11-ROUTE
"RTN","PSSHRVAL",190,0)
  . S MESSAGE=$$MEDRTE^PSSHRVL1(ROUTE,DRUGNM) I $L(MESSAGE) D
"RTN","PSSHRVAL",191,0)
  . .D SETDSEXP(.PSS,.PSSHASH,MESSAGE,11)
"RTN","PSSHRVAL",192,0)
  . QUIT   ;Checking if dose exists.
"RTN","PSSHRVAL",193,0)
 QUIT
"RTN","PSSHRVAL",194,0)
 ;
"RTN","PSSHRVAL",195,0)
SETDSEXP(PSS,PSSHASH,MESSAGE,DOSPIECE) ;
"RTN","PSSHRVAL",196,0)
 ;SET DOSE EXCEPTION
"RTN","PSSHRVAL",197,0)
 ;PSS-ARRAY OF MED PROFILE INFORMATION(BY REF)
"RTN","PSSHRVAL",198,0)
 ;PSSHASH-HOLDS DATA EXCEPTION (BY REF)
"RTN","PSSHRVAL",199,0)
 ;MESSAGE-REASON AND ERROR REASON
"RTN","PSSHRVAL",200,0)
 ;DOSEPIECE-THE OFFENDING PIECE OF DATA FROM DOSING INFORMATON-NOT SENT IF FROM
"RTN","PSSHRVAL",201,0)
 ;DEMOGRAF CALL.
"RTN","PSSHRVAL",202,0)
 ;
"RTN","PSSHRVAL",203,0)
 SET PSS("Counter")=$$NEXTDOS(.PSS,.PSSHASH)
"RTN","PSSHRVAL",204,0)
 SET PSS("ReasonCode")=PSSHASH("ReasonCode")
"RTN","PSSHRVAL",205,0)
 SET PSS("Message")=$P(MESSAGE,U)
"RTN","PSSHRVAL",206,0)
 SET PSS("ReasonText")=$P(MESSAGE,U,2)
"RTN","PSSHRVAL",207,0)
 SET PSS("CprsOrderNumber")=""
"RTN","PSSHRVAL",208,0)
 SET PSSHASH("Exception",PSS("ProspectiveOrProfile"),"DOSE",PSS("PharmOrderNum"),PSS("Counter"))=$$DOSPIECE(.PSS)
"RTN","PSSHRVAL",209,0)
 I $G(DOSPIECE) SET PSSHASH("DoseValue",DOSPIECE)=""
"RTN","PSSHRVAL",210,0)
 QUIT
"RTN","PSSHRVAL",211,0)
 ;
"RTN","PSSHRVAL",212,0)
DOSINEXP(PSSHASH) ;
"RTN","PSSHRVAL",213,0)
 N ORDERNUM,MESSAGE,REASON,DRUGNM,ERRNUM,TMPNODE,PSS
"RTN","PSSHRVAL",214,0)
 S ORDERNUM=""
"RTN","PSSHRVAL",215,0)
 F  S ORDERNUM=$O(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE",ORDERNUM)) Q:'$L(ORDERNUM)  D
"RTN","PSSHRVAL",216,0)
 .S TMPNODE=$G(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","DOSE",ORDERNUM)) Q:'$L(TMPNODE)
"RTN","PSSHRVAL",217,0)
 .S ERRNUM=+TMPNODE  ;ERROR NUMBER
"RTN","PSSHRVAL",218,0)
 .S DRUGNM=$P(TMPNODE,U,2)
"RTN","PSSHRVAL",219,0)
 .S MESSAGE=$$DOSEMSG^PSSHRVL1(DRUGNM)
"RTN","PSSHRVAL",220,0)
 .S REASON=$$INRSON^PSSHRVL1(ERRNUM)
"RTN","PSSHRVAL",221,0)
 .S MESSAGE=MESSAGE_U_REASON
"RTN","PSSHRVAL",222,0)
 .S PSS("PharmOrderNum")=ORDERNUM
"RTN","PSSHRVAL",223,0)
 .S PSS("ProspectiveOrProfile")="PROSPECTIVE"
"RTN","PSSHRVAL",224,0)
 .S PSS("Package")=""
"RTN","PSSHRVAL",225,0)
 .S PSS("DoseValue")=""
"RTN","PSSHRVAL",226,0)
 .S PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",227,0)
 .D SETDSEXP(.PSS,.PSSHASH,MESSAGE)
"RTN","PSSHRVAL",228,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),"DOSE",ORDERNUM) ;remove so no more checks
"RTN","PSSHRVAL",229,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),"PROSPECTIVE",ORDERNUM)
"RTN","PSSHRVAL",230,0)
 Q
"RTN","PSSHRVAL",231,0)
 ;
"RTN","PSSHRVAL",232,0)
OIEXP(PSSHASH) ;
"RTN","PSSHRVAL",233,0)
 N ORDITEM,ERRNUM,MESSAGE,REASON,PSS,ORDERNUM,TMPNODE
"RTN","PSSHRVAL",234,0)
 S ORDITEM=""
"RTN","PSSHRVAL",235,0)
 F  S ORDITEM=$O(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI",ORDITEM)) Q:'$L(ORDITEM)  D
"RTN","PSSHRVAL",236,0)
 .S TMPNODE=$G(^TMP($JOB,PSSHASH("Base"),"IN","EXCEPTIONS","OI",ORDITEM)) Q:'$L(TMPNODE)
"RTN","PSSHRVAL",237,0)
 .S ERRNUM=+TMPNODE  ;ERROR NUMBER
"RTN","PSSHRVAL",238,0)
 .S ORDERNUM=$P(TMPNODE,U,2)
"RTN","PSSHRVAL",239,0)
 .S MESSAGE=$$OIMSG^PSSHRVL1(ORDITEM)
"RTN","PSSHRVAL",240,0)
 .S REASON=$$INRSON^PSSHRVL1(ERRNUM,ORDERNUM)
"RTN","PSSHRVAL",241,0)
 .S $P(PSS("I"),U,7)=MESSAGE
"RTN","PSSHRVAL",242,0)
 .S $P(PSS("I"),U,10)=REASON
"RTN","PSSHRVAL",243,0)
 .S PSS("PharmOrderNum")=ORDERNUM
"RTN","PSSHRVAL",244,0)
 .S PSS("ProspectiveOrProfile")=$S($$ISPROF^PSSHRCOM(ORDERNUM):"PROFILE",1:"PROSPECTIVE")
"RTN","PSSHRVAL",245,0)
 .S PSS("Package")=""
"RTN","PSSHRVAL",246,0)
 .S PSS("DoseValue")=""
"RTN","PSSHRVAL",247,0)
 .S PSS("ReasonSource")=$$GETUCI^PSSHRVL1()
"RTN","PSSHRVAL",248,0)
 .S PSS("Counter")=$$NEXTGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",249,0)
 .D SETEXCP(.PSS,.PSSHASH)
"RTN","PSSHRVAL",250,0)
 .D KILLNODE^PSSHRVL1(PSSHASH("Base"),PSS("ProspectiveOrProfile"),ORDERNUM)
"RTN","PSSHRVAL",251,0)
 Q
"RTN","PSSHRVAL",252,0)
 ;
"RTN","PSSHRVAL",253,0)
NEXTDOS(PSS,PSSHASH) ;
"RTN","PSSHRVAL",254,0)
 ;@DESC Gets the next dose
"RTN","PSSHRVAL",255,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",256,0)
 ;@PSSHASH The internal hash ;
"RTN","PSSHRVAL",257,0)
 ;@NOTE PSSHASH looks like this: 
"RTN","PSSHRVAL",258,0)
 ; PSSHASH("Exception","PROSPECTIVE","DOSE",PharmacyOrderNum,Counter
"RTN","PSSHRVAL",259,0)
 ; 
"RTN","PSSHRVAL",260,0)
 N PSNEXT
"RTN","PSSHRVAL",261,0)
 S PSNEXT=":"
"RTN","PSSHRVAL",262,0)
 S PSNEXT=$ORDER(PSSHASH("Exception","PROSPECTIVE","DOSE",PSS("PharmOrderNum"),PSNEXT),-1)
"RTN","PSSHRVAL",263,0)
 Q PSNEXT+1
"RTN","PSSHRVAL",264,0)
 ;
"RTN","PSSHRVAL",265,0)
NEXTGCN(PSS,PSSHASH) ;
"RTN","PSSHRVAL",266,0)
 ;@DESC Gets the next Gcn
"RTN","PSSHRVAL",267,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",268,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",269,0)
 ;
"RTN","PSSHRVAL",270,0)
 N PSNEXT
"RTN","PSSHRVAL",271,0)
 S PSNEXT=":"
"RTN","PSSHRVAL",272,0)
 S PSNEXT=$ORDER(PSSHASH("Exception",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"),PSNEXT),-1)
"RTN","PSSHRVAL",273,0)
 Q PSNEXT+1
"RTN","PSSHRVAL",274,0)
 ;
"RTN","PSSHRVAL",275,0)
DOSPIECE(PSS) ;
"RTN","PSSHRVAL",276,0)
 ;@DESC Appends all pre-defined pieces to a temp var
"RTN","PSSHRVAL",277,0)
 ;@PSS The temp hash
"RTN","PSSHRVAL",278,0)
 ;@RETURNS The appended temp var.
"RTN","PSSHRVAL",279,0)
 ;
"RTN","PSSHRVAL",280,0)
 SET PSS("I")=$PIECE(PSS("DoseValue"),"^",1)_"^" ;GCN
"RTN","PSSHRVAL",281,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",2)_"^" ;Vuid
"RTN","PSSHRVAL",282,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",3)_"^" ;Ien
"RTN","PSSHRVAL",283,0)
 SET PSS("I")=PSS("I")_$PIECE(PSS("DoseValue"),"^",4)_"^" ;DrugName
"RTN","PSSHRVAL",284,0)
 SET PSS("I")=PSS("I")_PSS("CprsOrderNumber")_"^" ;CprsOrderNumber
"RTN","PSSHRVAL",285,0)
 SET PSS("I")=PSS("I")_PSS("Package")_"^" ;Package
"RTN","PSSHRVAL",286,0)
 SET PSS("I")=PSS("I")_PSS("Message")_"^"
"RTN","PSSHRVAL",287,0)
 SET PSS("I")=PSS("I")_PSS("ReasonCode")_"^"
"RTN","PSSHRVAL",288,0)
 SET PSS("I")=PSS("I")_PSS("ReasonSource")_"^"
"RTN","PSSHRVAL",289,0)
 SET PSS("I")=PSS("I")_PSS("ReasonText")
"RTN","PSSHRVAL",290,0)
 QUIT PSS("I")
"RTN","PSSHRVAL",291,0)
 ;
"RTN","PSSHRVAL",292,0)
CHECKGCN(PSS,PSSHASH) ;
"RTN","PSSHRVAL",293,0)
 ;@DESC Checks the GCN for a Drug
"RTN","PSSHRVAL",294,0)
 ;@PSS A temp array
"RTN","PSSHRVAL",295,0)
 ;@PSSHASH The input array
"RTN","PSSHRVAL",296,0)
 ;@ASSERT PSS("DrugValue") exists.
"RTN","PSSHRVAL",297,0)
 ;
"RTN","PSSHRVAL",298,0)
 N DRUGNM,DRUGIEN,MESSAGE,REASON,BADGCN
"RTN","PSSHRVAL",299,0)
 SET PSS("Counter")="0"
"RTN","PSSHRVAL",300,0)
 DO:'$PIECE(PSS("DrugValue"),"^",1)
"RTN","PSSHRVAL",301,0)
  . SET DRUGIEN=$P(PSS("DrugValue"),"^",3)
"RTN","PSSHRVAL",302,0)
  . SET DRUGNM=$P(PSS("DrugValue"),"^",4)
"RTN","PSSHRVAL",303,0)
  . S BADGCN=0
"RTN","PSSHRVAL",304,0)
  . S:$PIECE(PSS("DrugValue"),"^",1)'?1.N BADGCN=-1
"RTN","PSSHRVAL",305,0)
  . SET MESSAGE=$$GCNREASN^PSSHRVL1(DRUGIEN,DRUGNM,PSS("PharmOrderNum"),BADGCN)
"RTN","PSSHRVAL",306,0)
  . I $L(MESSAGE) SET REASON=$P(MESSAGE,U,2,3),MESSAGE=$P(MESSAGE,U)
"RTN","PSSHRVAL",307,0)
  . SET PSS("Counter")=$$NEXTGCN(.PSS,.PSSHASH)
"RTN","PSSHRVAL",308,0)
  . SET PSS("I")="^" ;Gcn
"RTN","PSSHRVAL",309,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",2)_"^" ;Vuid
"RTN","PSSHRVAL",310,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",3)_"^" ;Ien
"RTN","PSSHRVAL",311,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",4)_"^" ;DrugName
"RTN","PSSHRVAL",312,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",5)_"^" ;CprsOrderNumber
"RTN","PSSHRVAL",313,0)
  . SET PSS("I")=PSS("I")_$PIECE(PSS("DrugValue"),"^",6)_"^" ;Package
"RTN","PSSHRVAL",314,0)
  . SET PSS("I")=PSS("I")_MESSAGE_"^"
"RTN","PSSHRVAL",315,0)
  . ;Reason code is null for 0.5
"RTN","PSSHRVAL",316,0)
  . SET PSS("I")=PSS("I")_PSSHASH("ReasonCode")_U
"RTN","PSSHRVAL",317,0)
  . ;Set reason text
"RTN","PSSHRVAL",318,0)
  . SET PSS("I")=PSS("I")_$$GETUCI^PSSHRVL1()_U
"RTN","PSSHRVAL",319,0)
  . SET PSS("I")=PSS("I")_REASON
"RTN","PSSHRVAL",320,0)
  . ;
"RTN","PSSHRVAL",321,0)
  . D SETEXCP(.PSS,.PSSHASH)
"RTN","PSSHRVAL",322,0)
  . D KILLNODE^PSSHRVL1(PSSHASH("Base"),PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))
"RTN","PSSHRVAL",323,0)
 QUIT
"RTN","PSSHRVAL",324,0)
 ;
"RTN","PSSHRVAL",325,0)
SETEXCP(PSS,PSSHASH) ;
"RTN","PSSHRVAL",326,0)
 SET PSSHASH("Exception",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"),PSS("Counter"))=PSS("I")
"RTN","PSSHRVAL",327,0)
 Q
"RTN","PSSHRVAL",328,0)
 ;
"RTN","PSSHRVAL",329,0)
DRUGPROF(PSSHASH) ;
"RTN","PSSHRVAL",330,0)
 ;@DESC Checks the profile drugs.
"RTN","PSSHRVAL",331,0)
 ;@PSSHASH The internal hash
"RTN","PSSHRVAL",332,0)
 ;
"RTN","PSSHRVAL",333,0)
 NEW PSS
"RTN","PSSHRVAL",334,0)
 SET PSS("ProspectiveOrProfile")="PROFILE"
"RTN","PSSHRVAL",335,0)
 SET PSS("PharmOrderNum")=""
"RTN","PSSHRVAL",336,0)
 FOR  SET PSS("PharmOrderNum")=$ORDER(^TMP($JOB,PSSHASH("Base"),"IN",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))) QUIT:PSS("PharmOrderNum")=""  DO
"RTN","PSSHRVAL",337,0)
  . SET PSS("DrugValue")=^TMP($JOB,PSSHASH("Base"),"IN",PSS("ProspectiveOrProfile"),PSS("PharmOrderNum"))
"RTN","PSSHRVAL",338,0)
  . ; DO CHECKGCN(.PSS,.PSSHASH) ; VEN/SMH *11310000 Don't check for GCN.
"RTN","PSSHRVAL",339,0)
  . QUIT
"RTN","PSSHRVAL",340,0)
 QUIT
"RTN","PSSHRVAL",341,0)
 ;
"RTN","PSSHTTP")
0^3^B14560152
"RTN","PSSHTTP",1,0)
PSSHTTP ;WOIFO/AV - REENGINERING Sends XML Request to PEPS via HWSC ;2013-08-06  11:18 AM
"RTN","PSSHTTP",2,0)
 ;;1.0;PHARMACY DATA MANAGEMENT;**136,13100000**;9/30/97;Build 3
"RTN","PSSHTTP",3,0)
 ;
"RTN","PSSHTTP",4,0)
 ; @author  - Alex Vazquez, Chris Flegel, Timothy Sabat, S Gordon
"RTN","PSSHTTP",5,0)
 ; @date    - September 19, 2007
"RTN","PSSHTTP",6,0)
 ; @version - 1.0
"RTN","PSSHTTP",7,0)
 ;
"RTN","PSSHTTP",8,0)
 ; Modifications for Mocha bypass by VEN/SMH (*13100000)
"RTN","PSSHTTP",9,0)
 ;
"RTN","PSSHTTP",10,0)
 QUIT
"RTN","PSSHTTP",11,0)
 ;;
"RTN","PSSHTTP",12,0)
PEPSPOST(DOCHAND,XML) ;
"RTN","PSSHTTP",13,0)
 ; @DESC Sends an HTTP request to PEPS as a POST
"RTN","PSSHTTP",14,0)
 ;
"RTN","PSSHTTP",15,0)
 ; @DOCHAND Handle to XML document
"RTN","PSSHTTP",16,0)
 ; @XML XML request as string
"RTN","PSSHTTP",17,0)
 ;
"RTN","PSSHTTP",18,0)
 ; @RETURNS A handle to response XML document
"RTN","PSSHTTP",19,0)
 ;          1 for success, 0 for failure
"RTN","PSSHTTP",20,0)
 ;
"RTN","PSSHTTP",21,0)
 ;DEBUG
"RTN","PSSHTTP",22,0)
 ;ZWRITE XML
"RTN","PSSHTTP",23,0)
 ;R %
"RTN","PSSHTTP",24,0)
 ;DEBUG
"RTN","PSSHTTP",25,0)
 ;
"RTN","PSSHTTP",26,0)
 ; VEN/SMH - MOCHA External Interface replacement
"RTN","PSSHTTP",27,0)
 ;
"RTN","PSSHTTP",28,0)
 ; Grab Input XML and parse.
"RTN","PSSHTTP",29,0)
 K ^TMP($J,"INPUT XML")
"RTN","PSSHTTP",30,0)
 M ^TMP($J,"INPUT XML",1)=XML
"RTN","PSSHTTP",31,0)
 N DOCHAND2 S DOCHAND2=$$EN^MXMLDOM($NA(^TMP($J,"INPUT XML")),"W")
"RTN","PSSHTTP",32,0)
 K ^TMP($J,"INPUT XML")
"RTN","PSSHTTP",33,0)
 ;
"RTN","PSSHTTP",34,0)
 ; Send parsed XML to be analyzed for drug checks. Response XML produced
"RTN","PSSHTTP",35,0)
 ; will be found in RESULT.
"RTN","PSSHTTP",36,0)
 ;
"RTN","PSSHTTP",37,0)
 N RESULT
"RTN","PSSHTTP",38,0)
 D EN^KBANLATT(.RESULT,DOCHAND2)
"RTN","PSSHTTP",39,0)
 ;
"RTN","PSSHTTP",40,0)
 ; Remove parsed input XML.
"RTN","PSSHTTP",41,0)
 D DELETE^MXMLDOM(DOCHAND2)
"RTN","PSSHTTP",42,0)
 ;
"RTN","PSSHTTP",43,0)
 K RESULT("mime") ; Remove mime thingy intended for the web server.
"RTN","PSSHTTP",44,0)
 ;
"RTN","PSSHTTP",45,0)
 ;DEBUG
"RTN","PSSHTTP",46,0)
 ;ZWRITE RESULT
"RTN","PSSHTTP",47,0)
 ;R %
"RTN","PSSHTTP",48,0)
 ;DEBUG
"RTN","PSSHTTP",49,0)
 ;
"RTN","PSSHTTP",50,0)
 ; Parse output XML and return Handle in DOCHAND (passed here by ref).
"RTN","PSSHTTP",51,0)
 K ^TMP($J,"OUTPUT XML")
"RTN","PSSHTTP",52,0)
 M ^TMP($J,"OUTPUT XML")=RESULT
"RTN","PSSHTTP",53,0)
 ; Parse the XML (W = No DTD supplied)
"RTN","PSSHTTP",54,0)
 SET DOCHAND=$$EN^MXMLDOM($NA(^TMP($J,"OUTPUT XML")),"W")
"RTN","PSSHTTP",55,0)
 K ^TMP($J,"OUTPUT XML")
"RTN","PSSHTTP",56,0)
 ;
"RTN","PSSHTTP",57,0)
 IF DOCHAND<1 QUIT 0 ; XML Parsing failure
"RTN","PSSHTTP",58,0)
 ;
"RTN","PSSHTTP",59,0)
 ; Success!
"RTN","PSSHTTP",60,0)
 QUIT 1
"RTN","PSSHTTP",61,0)
 ; /END VEN/SMH - MOCHA External Interface replacement
"RTN","PSSHTTP",62,0)
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
"RTN","PSSHTTP",63,0)
 ;
"RTN","PSSHTTP",64,0)
 ;
"RTN","PSSHTTP",65,0)
 NEW PSS,PSSERR,$ETRAP,$ESTACK
"RTN","PSSHTTP",66,0)
 ;
"RTN","PSSHTTP",67,0)
 ; Set error trap
"RTN","PSSHTTP",68,0)
 SET $ETRAP="DO ERROR^PSSHTTP"
"RTN","PSSHTTP",69,0)
 ;
"RTN","PSSHTTP",70,0)
 SET PSS("server")="PEPS"
"RTN","PSSHTTP",71,0)
 SET PSS("webserviceName")="ORDER_CHECKS"
"RTN","PSSHTTP",72,0)
 SET PSS("path")="ordercheck"
"RTN","PSSHTTP",73,0)
 ;
"RTN","PSSHTTP",74,0)
 SET PSS("parameterName")="xmlRequest"
"RTN","PSSHTTP",75,0)
 SET PSS("parameterValue")=XML
"RTN","PSSHTTP",76,0)
 ;
"RTN","PSSHTTP",77,0)
 ; Get instance of client REST request object
"RTN","PSSHTTP",78,0)
 SET PSS("restObject")=$$GETREST^XOBWLIB(PSS("webserviceName"),PSS("server"))
"RTN","PSSHTTP",79,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",80,0)
 ;
"RTN","PSSHTTP",81,0)
 ; Insert XML as parameter
"RTN","PSSHTTP",82,0)
 DO PSS("restObject").InsertFormData(PSS("parameterName"),PSS("parameterValue"))
"RTN","PSSHTTP",83,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",84,0)
 ;
"RTN","PSSHTTP",85,0)
 ; Execute HTTP Post method
"RTN","PSSHTTP",86,0)
 SET PSS("postResult")=$$POST^XOBWLIB(PSS("restObject"),PSS("path"),.PSSERR)
"RTN","PSSHTTP",87,0)
 IF $DATA(^TMP($JOB,"OUT","EXCEPTION"))>0 QUIT 0
"RTN","PSSHTTP",88,0)
 ;
"RTN","PSSHTTP",89,0)
 DO:PSS("postResult")
"RTN","PSSHTTP",90,0)
 . SET PSS("result")=##class(gov.va.med.pre.ws.XMLHandler).getHandleToXmlDoc(PSS("restObject").HttpResponse.Data, .DOCHAND)
"RTN","PSSHTTP",91,0)
 . QUIT
"RTN","PSSHTTP",92,0)
 ;
"RTN","PSSHTTP",93,0)
 DO:'PSS("postResult")
"RTN","PSSHTTP",94,0)
 . SET ^TMP($JOB,"OUT","EXCEPTION")="Unable to make http request."
"RTN","PSSHTTP",95,0)
 . SET PSS("result")=0
"RTN","PSSHTTP",96,0)
 . QUIT
"RTN","PSSHTTP",97,0)
 ;
"RTN","PSSHTTP",98,0)
 QUIT PSS("result")
"RTN","PSSHTTP",99,0)
 ;;
"RTN","PSSHTTP",100,0)
ERROR ;
"RTN","PSSHTTP",101,0)
 ; @DESC Handles error during request to PEPS via webservice.
"RTN","PSSHTTP",102,0)
 ;
"RTN","PSSHTTP",103,0)
 ; Depends on GLOBAL variable PSSERR to be set in previous call.
"RTN","PSSHTTP",104,0)
 ;
"RTN","PSSHTTP",105,0)
 ; @RETURNS Nothing. Value store in global.
"RTN","PSSHTTP",106,0)
 ;
"RTN","PSSHTTP",107,0)
 NEW ERRARRAY
"RTN","PSSHTTP",108,0)
 ;
"RTN","PSSHTTP",109,0)
 ; Get error object from Error Object Factory
"RTN","PSSHTTP",110,0)
 IF $GET(PSSERR)="" SET PSSERR=$$EOFAC^XOBWLIB()
"RTN","PSSHTTP",111,0)
 ; Store the error object in the error array
"RTN","PSSHTTP",112,0)
 DO ERR2ARR^XOBWLIB(PSSERR,.ERRARRAY)
"RTN","PSSHTTP",113,0)
 ;
"RTN","PSSHTTP",114,0)
 ; Parse out the error text and store in global
"RTN","PSSHTTP",115,0)
 SET ^TMP($JOB,"OUT","EXCEPTION")=$$GETTEXT(.ERRARRAY)
"RTN","PSSHTTP",116,0)
 ;
"RTN","PSSHTTP",117,0)
 ; Set ecode to empty to return to calling function
"RTN","PSSHTTP",118,0)
 SET $ECODE=""
"RTN","PSSHTTP",119,0)
 ;
"RTN","PSSHTTP",120,0)
 QUIT
"RTN","PSSHTTP",121,0)
 ;;
"RTN","PSSHTTP",122,0)
GETTEXT(ERRARRAY) ;
"RTN","PSSHTTP",123,0)
 ; @DESC Gets the error text from the array
"RTN","PSSHTTP",124,0)
 ;
"RTN","PSSHTTP",125,0)
 ; @ERRARRAY Error array stores error in format defined by web service product.
"RTN","PSSHTTP",126,0)
 ;
"RTN","PSSHTTP",127,0)
 ; @RETURNS Error info as a single string
"RTN","PSSHTTP",128,0)
 ;
"RTN","PSSHTTP",129,0)
 NEW PSS
"RTN","PSSHTTP",130,0)
 ;
"RTN","PSSHTTP",131,0)
 ; Loop through the text subscript of error array and concatenate
"RTN","PSSHTTP",132,0)
 SET PSS("errorText")=""
"RTN","PSSHTTP",133,0)
 SET PSS("I")=""
"RTN","PSSHTTP",134,0)
 FOR  SET PSS("I")=$ORDER(ERRARRAY("text",PSS("I"))) QUIT:PSS("I")=""  DO
"RTN","PSSHTTP",135,0)
 . SET PSS("errorText")=PSS("errorText")_ERRARRAY("text",PSS("I"))
"RTN","PSSHTTP",136,0)
 . QUIT
"RTN","PSSHTTP",137,0)
 ;
"RTN","PSSHTTP",138,0)
 QUIT PSS("errorText")
"RTN","PSSHTTP",139,0)
 ;;
"VER")
8.0^22.0
**END**
**END**
